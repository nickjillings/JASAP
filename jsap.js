var JSAP=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";t.a=function(e){var t=new EventTarget,n={};function r(e,t,n){var a;for(a in e){var u;if(e.hasOwnProperty(a))if("object"==typeof e[a])e[a].toXML?u=e[a].toXML(n):(u=n.createElement(a),t.appendChild(u),e[a].length?i(e[a],u,n):r(e[a],u,n)),t.appendChild(u);else t.setAttribute(a,e[a])}}function i(e,t,n){var i,a;e.length;i=e.every((function(e){return"number"==typeof e})),a=e.every((function(e){return"string"==typeof e})),i||a?e.forEach((function(e,n){t.setAttribute("index-"+n,e)})):e.forEach((function(e,i){var a=document.createElement("value");a.setAttribute("index",i),r(e,a,n),t.appendChild(a)}))}Object.defineProperties(this,{addEventListener:{value:function(e,n,r){return t.addEventListener(e,n,r)}},removeEventListener:{value:function(e,n,r){return t.removeEventListener(e,n,r)}},name:{get:function(){return e},set:function(t){if(void 0!==e)throw"Name is already set"}},setTerm:{value:function(e,r){if("string"!=typeof e&&0===e.length)throw"term must be a string";n[e]=r,t.dispatchEvent(new CustomEvent("altered",{detail:{term:e,value:r}}))}},setTerms:{value:function(e){if("object"!=typeof e)throw"setTerms takes an object of term/value pairs";var t;for(t in e)e.hasOwnProperty(t)&&this.setTerm(t,e[t])}},deleteTerm:{value:function(e){this.setTerm(e,void 0)}},getTerm:{value:function(e){if("string"!=typeof e&&0===e.length)throw"term must be a string";return n[e]}},hasTerm:{value:function(e){if("string"!=typeof e&&0===e.length)throw"term must be a string";return n.hasOwnProperty(e)}},toJSON:{value:function(){return JSON.parse(JSON.stringify(n))}},toXML:{value:function(t){var i;return i=t?t.createElement(e):(t=document.implementation.createDocument(null,e,null)).firstElementChild,r(n,i,t),i}}})}},function(e,t,n){"use strict";(function(e){var r=n(0),i=n(6),a=n(7),u=n(5),o=n(4),s=n(2),c=n(3);t.a=function t(n,f){function l(e,t,n){e.start.call(e,t,n),e.parameters.getParameterNames().forEach((function(r){var i=e.parameters.getParameterByName(r);i.enabled&&i.start(t,n)}))}function d(){y.forEach((function(e){var t,r;t=e.node,r=n.currentTime,t.stop.call(t,r),t.parameters.getParameterNames().forEach((function(e){var n=t.parameters.getParameterByName(e);n.enabled&&n.stop(r)}))}))}var h,p,m=[],v=[],g=[],y=[],b=!1,P=new c.a(this),w=[];this.pluginAssets=new i.a(this),this.loadPrototypeModule=function(t,n){var r=this;return new Promise((function(n,r){"function"==typeof e.define&&e.define.amd?e.require([t.url],(function(e){n(e)})):"object"==typeof e.module&&e.module.exports?n(e.require(t.url)):r("Cannot load using modular systems")})).then((function(e){if("function"==typeof e)return r.addPrototype(e);reject("Is not a module plugin")})).catch((function(){if(!0!==n)return console.warn("Could not load using modular systems"),r.loadPluginScript(t);reject("Cannot load using modular systems")}))},this.loadResource=function(e){return new Promise((function(t,n){"object"!=typeof e?n("Error"):"string"!=typeof e.url?n("resourceObject.url must be a string"):"function"!=typeof e.test?n("resourceObject.test must be a function"):t(e)})).then((function(e){var t=e.test();if(!1!==t&&!0!==t)throw"resourceObject.test must return true or false";switch(e.type||(e.type="javascript"),e.type=e.type.toLowerCase(),e.type){case"javascript":return t?new Promise((function(t,n){"string"==typeof e.returnObject?window.hasOwnProperty(e.returnObject)?t(window[e.returnObject]):n(!1):t(!0)})):function(e){return!1===e.url.startsWith("http")&&void 0!==f&&f.startsWith("http")&&(e.url=f+e.url),new Promise((function(t,n){var r=new XMLHttpRequest;r.open("GET",e.url),r.onreadystatechange=function(){if(4==r.readyState){var n=document.createElement("script");n.textContent=r.responseText,document.getElementsByTagName("head")[0].appendChild(n),t(e)}},r.send()}))}(e).then((function(e){return"string"!=typeof e.returnObject||!!window.hasOwnProperty(e.returnObject)&&window[e.returnObject]}));default:throw"Invalid type "+String(e.type)}}))},this.loadPluginScript=function(e){if(e){if("string"!=typeof e.returnObject)throw"resourceObject.returnObject must be the name of the prototype function";return this.loadResource(e).then(function(e){return this.addPrototype(e)}.bind(this))}},this.injectPrototype=function(e){if("function"!=typeof e)throw"Invalid executable function";return this.addPrototype(e)},this.addPrototype=function(e){var t=this;return new Promise((function(t,n){"function"!=typeof e?n("The Prototype must be a function!"):"string"!=typeof e.prototype.name||0===e.prototype.name.length?n("Malformed plugin. Name not defined"):"string"!=typeof e.prototype.version||0===e.prototype.version.length?n("Malformed plugin. Version not defined"):"string"!=typeof e.prototype.uniqueID||0===e.prototype.uniqueID.length?n("Malformed plugin. uniqueID not defined"):t(e)})).then((function(e){var n={proto:e,name:e.prototype.name,version:e.prototype.version,uniqueID:e.prototype.uniqueID},r=g.find((function(e){var t,n=0;for(t in this)e[t]===this[t]&&n++;return 4===n}),n);if(r)throw"The plugin must be unique!";return r=new a.a(e,t),g.push(r),Object.defineProperties(r,{factory:{value:t}}),r}))},this.getPrototypes=function(){return g},this.getAudioPluginPrototypes=function(){return g.filter((function(e){return 0==e.hasMidiInput&&0==e.hasMidiOutput}))},this.getMidiSynthPrototypes=function(){return g.filter((function(e){return 1==e.hasMidiInput&&0==e.hasMidiOutput}))},this.getMidiPluginPrototypes=function(){return g.filter((function(e){return 1==e.hasMidiInput&&1==e.hasMidiOutput}))},this.getAllPlugins=function(){return y},this.getAllPluginsObject=function(){var e,t={factory:this,subFactories:[]};for(e=0;e<m.length;e++)t.subFactories.push({subFactory:m[e],plugins:m[e].getPlugins()});return t},this.createSubFactory=function(e,t){return console.warn('DEPRECATED - This function will be deprecated in favour of "createAudioPluginChainManager"'),this.createAudioPluginChainManager(e,t)},this.destroySubFactory=function(e,t){return console.warn('DEPRECATED - This function will be deprecated in favour of "destroyAudioPluginChainManager"'),this.destroyAudioPluginChainManager(e,t)},this.createAudioPluginChainManager=function(e,t){var n=new o.a(this,e,t);return Object.defineProperties(n,{SessionData:{value:this.SessionData},UserData:{value:this.UserData}}),m.push(n),n},this.duplicateAudioPluginChainManager=function(e,t,n){var r=this.createAudioPluginChainManager(t,n),i=Promise.resolve();return e.getPlugins().forEach((function(e){i=i.then((function(){return r.createPlugin(e.prototypeObject).then((function(t){t.node.parameters.setParametersByObject(e.node.parameters.getParameterObject)}))}))})),i.then((function(){return r}))},this.destroyAudioPluginChainManager=function(e){var t=m.findIndex((function(e){return e===this}),e);t>=0&&(m.splice(t,1),e.destroy())},this.createMidiSynthesiserHost=function(e){void 0===e&&(e=this);var t=new s.a(e);return Object.defineProperties(t,{SessionData:{value:this.SessionData},UserData:{value:this.UserData}}),v.push(t),t},this.destroyMidiSynthesiserHost=function(e){var t=v.findIndex((function(e){return e===this}),e);t>=0&&(v.splice(t,1),e.destroy())},this.registerPluginInstance=function(e){if(y.find((function(e){return e===this}),e))throw"Plugin Instance not unique";if(y.push(e),b){var t=n.currentTime,r=this.getCurrentProgramTime();l(e.node,r,t)}return!0},this.deletePlugin=function(e){var t=y.indexOf(e);if(t>=0){var n=y.splice(t,1);n[0].delete(),n[0].node.externalInterface.closeWindows()}},this.getCurrentProgramTime=function(){return b?n.currentTime-p+h:h},this.setCurrentProgramTime=function(e){if(b)throw"Must stop playback to set the current program time";"number"==typeof e&&e>=0&&(h=e,this.PluginGUI.pollAllPlugins())},this.audioStart=function(e,t){void 0===t&&(t=n.currentTime),void 0===e&&(e=0,console.warn("Assuming start time at 0")),b||(this.setCurrentProgramTime(e),p=t,function(e,t){y.forEach((function(n){l(n.node,e,t)}))}(e,t),b=!0)},this.audioStop=function(){b&&(d(),b=!1)},this.createStore=function(e){var t=new r.a(e);return w.push(t),t},this.getStores=function(){return w},this.findStore=function(e){return w.find((function(t){return t.name===e}))},this.SessionData=new r.a("Session"),this.UserData=new r.a("User"),this.FeatureMap=new u.a,Object.defineProperty(this.FeatureMap,"factory",{value:this}),Object.defineProperties(this,{context:{value:n},hasAudioStarted:{get:function(){return b}},pluginRootURL:{get:function(){return f},set:function(e){if("string"==typeof e)return f=e;throw"Cannot set root URL without a string"}},createFactoryCopy:{value:function(e){return n=this,r=e,new Promise((function(e,t){void 0===r.sampleRate?t(new Error("Invalid audio context provided")):e(r)})).then((function(e){var n=new t(e),r=[];return g.forEach((function(e){r.push(n.addPrototype(e.proto))})),Promise.all(r).then((function(){return n}))})).then((function(e){return e.pluginAssets.importFromAssetLists(n.pluginAssets),e}));var n,r}},subFactories:{get:function(){return m}},PluginGUI:{value:P}})}}).call(this,n(8))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0);function i(e){var t,n=this;function i(r){return t&&e.deletePlugin(t.id),new Promise((function(e,t){0==r.hasMidiInput||1==r.hasMidiOutput?t("Prototype is not a MidiSynthesis type. hasMidiInput must be true and hasMidiOutput must be false"):e(r)})).then((function(){return r.createPluginInstance(n,!1).then((function(e){return Object.defineProperties(e,{TrackData:{value:n.TrackData}}),e}))}))}this.TrackData=new r.a("Track");var a=[];Object.defineProperties(this,{connect:{value:function(e,n,r){if(void 0===e)throw"Must define an AudioNode object";a.find((function(t){return t.destinationNode==e&&t.output==n&&t.input==r}))||(a.push({destinationNode:e,output:n,input:r}),void 0===t?console.warn("MIDI Synthesiser is not loaded, connections will be validated on load"):t.node.connect(e,n,r))}},disconnect:{value:function(e,n,r){void 0===e?(t&&t.disconnect(),a=[]):"number"==typeof e&&void 0===n?(n=e,e=void 0,a=a.filter((function(e){return e.output!=n||(t&&t.node.disconnect(e.destinationNode,e.output),!1)}))):"object"==typeof e&&void 0===n?a=a.filter((function(n){return n.destinationNode!=e||(t&&t.node.disconnect(n.destinationNode),!1)})):"object"==typeof e&&"number"==typeof n?a=a.filter((function(r){return r.destinationNode!=e||r.output!=n||(t&&t.node.disconnect(r.destinationNode,r.output),!1)})):"object"==typeof e&&"number"==typeof n&&"number"==typeof r&&(a=a.filter((function(i){return i.destinationNode!=e||i.output!=n||i.input!=r||(t&&t.node.disconnect(i.destinationNode,i.output,i.input),!1)})))}},scheduleEvent:{value:function(e,n){if(!t)throw"MIDI Synthesiser not loaded";t.node.scheduleEvent(e,n)}},cancelAllEvents:{value:function(e){if(!t)throw"MIDI Synthesiser not loaded";t.node.cancelAllEvents(e)}},midiSynthesiser:{get:function(){return t},set:function(){throw"Cannot set read-only attribute."}},loadMidiSynthesiserModule:{value:function(e){var n=this;return new Promise((function(t,n){0==e.hasMidiInput||1==e.hasMidiOutput?n("Prototype is not a MidiSynthesis type. hasMidiInput must be true and hasMidiOutput must be false"):t(e)})).then((function(e){return i.call(n,e).catch((function(e){throw console.log(e),"Plugin did not get created! Aborting"}))})).then((function(e){return e.node.onloaded.call(e.node),t=e,a.forEach((function(e){t.node.connect(e.destinationNode,e.output,e.input)})),t}))}}})}},function(e,t,n){"use strict";function r(e){return Object.create({setDefaultInterface:function(e,t,n){return{url:e,width:t,height:n}},buildPluginInterface:function(e,t){var n=document.createElement("iframe");return n.src=t.src,t.width&&(n.width=t.width),t.height&&(n.height=t.height),n.style.border="0",n},spawnPluginWindow:function(e,t,n){var r=window.open(t.src,e.name,n);return e.externalInterface.registerWindow(r),r},pollAllPlugins:function(){e.getAllPlugins().forEach((function(e){e.node.externalInterface.updateInterfaces(!0)}))}})}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=function(e,t){function n(e){var t,n=[];for(t=0;t<e.inputBuffer.numberOfChannels;t++)n[t]=e.inputBuffer.getChannelData(t);i.postMessage({state:2,frames:n})}function r(e){this.postFeatures(t,e.data.response)}var i=new Worker("jsap/feature-worker.js");i.onerror=function(e){console.error(e)},this.setFeatures=function(t){var a=this,u={state:1,sampleRate:e.context.sampleRate,featureList:t,numChannels:e.numberOfOutputs,frameSize:this.frameSize};this.features=t,t&&t.length>0?(i.onmessage=function(e){1===e.data.state?(i.onmessage=r.bind(a),a.extractor.onaudioprocess=n.bind(a)):i.postMessage(u)},i.postMessage({state:0})):this.extractor.onaudioprocess=void 0},this.rejoinExtractor=function(){e.connect(this.extractor)},this.extractor=e.context.createScriptProcessor(t,e.numberOfOutputs,1),e.connect(this.extractor),this.extractor.connect(e.context.destination),Object.defineProperty(this,"frameSize",{value:t})};var i=function(e,t){this.extractor=e.context.createAnalyser(),this.extractor.fftSize=t,e.connect(this.extractor),this.features=[],Object.defineProperty(this,"frameSize",{value:t});var n=owner.recursiveProcessing;function r(e){var t={numberOfChannels:1,results:[]};n(e,this.features),t.results[0]={channel:0,results:JSON.parse(e.toJSON())},this.postFeatures(e.length,t)}this.setFeatures=function(e){this.features=e,0===this.features.length?this.extractor.clearCallback():this.extractor.frameCallback(r,this)},this.rejoinExtractor=function(){e.connect(this.extractor)}};var a=function(e,t){var n=[];this.addExtractor=function(e){var a;return a=window.Worker?new r(t,e):new i(t,e),n.push(a),Object.defineProperty(a,"postFeatures",{value:function(e,t){var n={outputIndex:0,frameSize:e,results:t};this.postFeatures(n)}.bind(this)}),a},this.findExtractor=function(e){var t=e;return n.find((function(e){return Number(e.frameSize)===Number(t)}))},this.rejoinExtractors=function(){n.forEach((function(e){e.rejoinExtractor()}))},this.deleteExtractor=function(e){}};function u(e,t){var n;this.updateFeatures=function(t){var r;for(r=0;r<t.length;r++){if(void 0===n){if(r>1)throw"Requested an output that does not exist";n=new a(e,e.chainStart),Object.defineProperty(n,"postFeatures",{value:function(e){this.postFeatures(e)}.bind(this)})}var i;for(i=0;i<t[r].length;i++){var u=n.findExtractor(t[r][i].frameSize);u||(u=n.addExtractor(t[r][i].frameSize)),u.setFeatures(t[r][i].featureList)}}},this.rejoinExtractors=function(){n&&n.rejoinExtractors()},this.postFeatures=function(e){t.postFeatures({plugin:this,outputIndex:e.outputIndex,frameSize:e.frameSize,results:e.results})},t.createSourceMap(this,void 0)}var o=n(0);t.a=function(e,t,n){var r=[],i=t,a=n,s="",c=0,f=new u(this,e.FeatureMap),l=new EventTarget,d=this;function h(){for(var e=0,t=r.length-1;e<t;){var n=r[e++],i=r[e];n.reconnect(i)}}function p(){r.forEach((function(e){e.disconnect()}))}function m(){return r.length>0?(i.disconnect(r[0].input),r[r.length-1].output.disconnect(a)):i.disconnect(a),!0}function v(){r.length>0?(i.connect(r[0].input),r[r.length-1].output.connect(a)):i.connect(a),f.rejoinExtractors()}function g(e){return new Promise((function(t,n){t(e)})).then((function(){return e.createPluginInstance(d,!1).then((function(e){return Object.defineProperties(e,{TrackData:{value:d.TrackData}}),e}))}))}function y(e,t){var n,r,i=t.length;for(n=0;n<i;n++)e[(r=t[n]).name].apply(e,r.parameters),r.features&&r.features.length>0&&y(e.result[r.name],r.features)}function b(){var e=function(){var e=0;return r.filter((function(e){return!e.isBypassed()})).forEach((function(t){e+=t.node.processingDelayAsSamples})),e}();return c!=e&&(c=e,l.dispatchEvent(new Event("alterdelay"))),c}this.parent=e,i.disconnect(),i.connect(n),this.TrackData=new o.a("Track"),this.featureSender=f,this.getFeatureChain=function(){},this.bypassPlugin=function(e,t){!1!==r.includes(e)&&e.bypass(t)},this.getPrototypes=function(){return this.parent.getPrototypes()},this.getFactory=function(){return this.parent},this.destroy=function(e){var t;for(t=0;t<r.length;t++)this.destroyPlugin(r[t]);i.disconnect(),!0===e&&i.connect(a)},this.createPlugin=function(e){return g(e).catch((function(e){throw console.log(e),"Plugin did not get created! Aborting"})).then((function(e){return m(),r.push(e),p(),h(),v(),e.addEventListener("alterdelay",d),e.node.onloaded.call(e.node),b(),l.dispatchEvent(new Event("change")),e}))},this.removePlugin=function(e){var t=this.getPluginIndex(e);t>=0&&(m(),e.removeEventListener("alterdelay",d),e.node.stop.call(e.node),e.node.onunloaded.call(e.node),r.splice(t,1),p(),h(),v(),b(),l.dispatchEvent(new Event("change")))},this.destroyPlugin=function(e){this.removePlugin(e),this.parent.deletePlugin(e.id),b()},this.getPlugins=function(){return r},this.getAllPlugins=function(){return this.parent.getAllPluginsObject()},this.getPluginIndex=function(e){return r.findIndex((function(e,t,n){return e===this}),e)},this.movePlugin=function(t,n){var i,a,u,o=this.getPluginIndex(t);if(!1===e.getAllPlugins().includes(t))throw"Plugin does not exist";m(),p(),t.node.owner!==this?(t.node.owner.removePlugin(t),t.node.owner=this,i=[t]):(i=r.splice(o,1),t.node.onunloaded.call(t.node)),0===n?r=i.concat(r):n>=r.length?r=r.concat(i):(a=r.slice(0,n),u=r.slice(n),r=a.concat(i.concat(u))),h(),v(),t.node.onloaded.call(t.node),b(),l.dispatchEvent(new Event("change"))},this.copyPlugin=function(e,t){if(void 0===t&&(t=r.length),"number"!=typeof t||t<0||t>r.length)throw"Plugin copy index outside of the chain scope.";return g(e.prototypeObject).catch((function(e){throw console.log(e),"Plugin did not get created! Aborting"})).then((function(n){return n.node.parameters.setParametersByObject(e.node.parameters.getParameterObject()),m(),p(),r.splice(t,0,n),h(),v(),b(),n.node.onloaded.call(n.node),l.dispatchEvent(new Event("change")),n}))},Object.defineProperties(this,{chainStart:{value:t},chainStop:{value:n},updateDelayCompensation:{value:function(){return b()}},processingDelayAsSamples:{get:function(){return b()},set:function(){throw"processingDelayAsSamples is read-only"}},processingDelayAsSeconds:{get:function(){return this.processingDelayAsSamples/e.context.sampleRate},set:function(){throw"processingDelayAsSeconds is read-only"}},name:{get:function(){return s},set:function(e){return"string"==typeof e&&(s=e),s}},recursiveProcessing:{get:function(){return y}},handleEvent:{value:function(e){"alterdelay"==e.type&&b()}},addEventListener:{value:function(e,t){return l.addEventListener(e,t)}},removeEventListener:{value:function(e,t){return l.addEventListener(e,t)}}})}},function(e,t,n){"use strict";function r(e){var t=[];e.node.featureMap.Receiver;this.getRequestorInstance=function(){return e},this.addFeatures=function(e){!function e(t,n){var r;for(r=0;r<n.length;r++){var i=getFeatureNode(t,n[r]);(!i||n[r].parameters&&0!==n[r].parameters.length)&&(i=addFeatureNode(n[r],t)),void 0!==n[r].features&&n[r].features.length>0&&e(i.features,n[r].features)}}(t,e.features)},this.deleteFeatures=function(e){!function e(n,r){var i,a=r.length;for(i=0;i<a;i++){var u=getFeatureNode(n,r[i]);u>=0&&(r[u].features&&r[u].features.length>0?e(n[u].features,r[u].features):t.splice(u,0))}}(t,e.features)},this.getFeatureList=function(){return t},this.postFeatures=function(n){var r,i={plugin:n.plugin,outputIndex:n.outputIndex,frameSize:n.frameSize,features:{numberOfChannels:n.results.numberOfChannels,results:[]}};function a(e,t,n){var r;function i(e){return e.name===r}for(r in t)if(t.hasOwnProperty(r)){var u=n.find(i);u&&(t[r].constructor===Object&&u.results?(e[r]={},a(e[r],t[r],u.results)):e[r]=t[r])}}for(r=0;r<n.results.numberOfChannels;r++)i.features.results[r]={},a(i.features.results[r],n.results.results[r].results,t);e.node.featureMap.Receiver.postFeatures(i)}}function i(e,t){var n=[];function i(e){return n.find((function(e){return e.outputIndex===this.outputIndex&&e.frameSize===this.frameSize}),e)}function a(){function t(e){var n,r=[];for(n=0;n<e.length;n++){var i=getFeatureNode(r,e[n]);(!i||e.parameters&&0!==e[n].parameters.length)&&(i=addFeatureNode(e[n],r)),e[n].features&&e[n].features.length>0&&(i.features=t(e[n].features))}return r}var r,i=[];for(r=0;r<n.length;r++){void 0===i[n[r].outputIndex]&&(i[n[r].outputIndex]=[]);var a=i[n[r].outputIndex].find((function(e){return e.frameSize===this.frameSize}),n[r]);a||(a={frameSize:n[r].frameSize,featureList:void 0},i[n[r].outputIndex].push(a)),a.featureList=t(n[r].getFeatureList())}e.updateFeatures(i)}this.getSourceInstance=function(){return t},this.getSender=function(){return e},this.requestFeatures=function(e,t){var u=i(t);u||(u={outputIndex:t.outputIndex,frameSize:t.frameSize,requestors:[],getFeatureList:function(){var e,t=[];for(e=0;e<this.requestors.length;e++)t=t.concat(this.requestors[e].getFeatureList());return t}},n.push(u));var o=u.requestors.find((function(e){return e.getRequestorInstance()===this}),e);o||(o=new r(e),u.requestors.push(o)),o.addFeatures(t),a()},this.findFrameMap=function(e,t){return n.find((function(n){return n.outputIndex===e&&n.frameSize===t}))},this.cancelFeatures=function(e,t){if(void 0===t)n.forEach((function(t){var n=t.requestors.findIndex((function(t){return t.getRequestorInstance()===e}));n>=0&&t.requestors.splice(n,1)}));else{var r=i(t);if(!r)return;var u=r.requestors.find((function(e){return e.getRequestorInstance()===this}),e);if(!u)return;u.deleteFeatures(t)}a()}}function a(){var e=[];function t(t){return e.findIndex((function(e){return e.getSender()===this}),t)}function n(e,n,r){var i=e[t(n)];if(!i&&!(i=e[t(r)]))throw"Could not locate source map";return i}this.createSourceMap=function(t,n){var r=new i(t,n);return e.push(r),r},this.deleteSourceMap=function(n){var r=t(n);if(-1===r)throw"Could not find the source map for the plugin";e.splice(r,1)},this.getPluginSender=function(e){return e.constructor===PluginInstance&&(e=e.node),e.featureMap.Sender},this.requestFeatures=function(t,r,i){t.constructor!==PluginInstance&&(t=t.pluginInstance);var a=this.getPluginSender(r);n(e,r,a).requestFeatures(t,i)},this.deleteFeatures=function(t,r,i){if(t.constructor!==PluginInstance&&(t=t.pluginInstance),void 0===r)e.forEach((function(e){e.cancelFeatures(t)}));else{var a=this.getPluginSender(r);n(e,r,a).cancelFeatures(t,i)}},this.getFeatureList=function(e,t){},this.postFeatures=function(n){var r=e[t(n.plugin)];if(!r&&!(r=e[t(this.getPluginSender(n.plugin))]))throw"Plugin Instance not loaded!";r.findFrameMap(n.outputIndex,n.frameSize).requestors.forEach((function(e){e.postFeatures(this)}),n)}}n.d(t,"a",(function(){return a}))},function(e,t,n){"use strict";function r(e,t,n,r){var i,a=this;Object.defineProperties(this,{name:{value:t},url:{value:n},assetObject:{get:function(){return r}},fetch:{value:function(){return r?Promise.resolve(r):(void 0===i&&(i=fetch(n).then((function(e){return e.arrayBuffer()})).then((function(t){return e.context.decodeAudioData(t)})).then((function(e){return r=e,i=void 0,a}))),i)}},toJSON:{value:function(){return{name:t,url:n}}},toString:{value:function(){return JSON.stringify(this.toJSON())}}})}function i(e,t,n){var i=[];function a(e){return i.find((function(t){return t.url==e}))}this.addAssetUrlToList=function(t,n,u){if("string"!=typeof n)throw"addAssetUrlToList Argument-1 must be a type of string";if(a(n))throw'URL "'+n+'" already in this list';return i.push(new r(e,t,n,u)),i},this.removeAssetFromList=function(e){var t=i.findIndex((function(e){return e.url==url}));if(-1==t)throw"Asset not in this list";return i.splice(t,1),i},this.removeAssetUrlFromList=function(e){if("string"!=typeof e)throw"removeAssetUrlFromList Argument-1 must be a type of string";var t=a(e);return this.removeAssetFromList(t)},this.assetObjects=i,this.name=t,this.resourceType=n}var a=function(e,t,n){function r(e,t){return Promise.all(t.map(e=>e.fetch())).then((function(){"function"==typeof onload&&onload.call(e,t)}),(function(){"function"==typeof onerror&&onerror.call(e)}))}this.selectPack=function(e){if(!t.assetPacks.includes(e))throw"Pack not in factory asset packs";n=e},this.allAssetsLoaded=function(){return n.assetObjects.every(e=>void 0!==e.assetObject)},this.fetchAssetByName=function(e){if(void 0===n||null==n.assetObjects)throw"Pack not defined";var t=n.assetObjects.find(t=>e==t.name);if(t)return t.fetch();throw"Asset with name "+String(e)+" does not exist in this pack"},Object.defineProperties(this,{pack:{get:function(){return n}},loadAssets:{value:function(e){if(void 0===n||null==n.assetObjects)throw"Pack not defined";if(null==e&&(e=n.assetObjects),!Array.isArray(e)||0==e.length)throw"Must pass an array of assets";return e.every((function(e){return n.assetObjects.some(t=>t.name==e.name)}))?r(this,e):Promise.reject("Not all given assets are in this pack")}},onload:{get:function(){return onload},set:function(e){if("function"!=typeof e&&void 0!==e)throw"Must be a function or undefined";onload=e}},onerror:{get:function(){return onload},set:function(e){if("function"!=typeof e&&void 0!==e)throw"Must be a function or undefined";onerror=e}}})};function u(e,t){return e.find((function(e){return e.name==t}))}t.a=function(e){var t=[];this.addPackToList=function(n,r){if("string"!=typeof n)throw"addAssetUrlToList Argument-1 must be a type of string";if(u(t,n))throw'Pack with name "'+n+'" already in this list';var a=new i(e,n,r);return t.push(a),a},this.removeAssetPackFromList=function(e){var n=t.indexOf(e);if(-1==n)throw"Asset pack not in this list";return t.splice(n,1),t},this.removeAssetPackFromListByName=function(e){if("string"!=typeof e)throw"removeAssetUrlFromList Argument-1 must be a type of string";var n=u(t,e);return this.removeAssetFromList(n)},this.assetPacks=t,this.createAssetPackSelector=function(e,t){return new a(e,this,t)},this.importFromAssetLists=function(t){t.assetPacks.forEach((function(t){var n=this.addPackToList(t.name,t.resourceType);t.assetObjects.forEach((function(t){var n;if(void 0!==t.assetObject){n=e.context.createBuffer(t.assetObject.numberOfChannels,t.assetObject.length,t.assetObject.sampleRate);for(var r=0;r<n.numberOfChannels;r++)n.copyToChannel(t.assetObject.getChannelData(r),r,0)}this.addAssetUrlToList(t.name,t.url,n)}),n)}),this)}}},function(e,t,n){"use strict";function r(e){this.next_node=void 0;var t=!1,n=new EventTarget,r=e.context.createGain(),i=e.context.createGain();r.connect(e.getInputs()[0]),e.getOutputs()[0].connect(i),e.addEventListener(this),this.bypass=function(a){return(a=!0===a)===t||(a?(r.disconnect(),r.connect(i),t=!0,0!=e.processingDelayAsSamples&&n.dispatchEvent(new Event("alterdelay"))):(r.disconnect(),r.connect(e.getInputs()[0]),t=!1,0!=e.processingDelayAsSamples&&n.dispatchEvent(new Event("alterdelay")))),t},this.isBypassed=function(){return t},this.reconnect=function(e){this.connect(e)},this.connect=function(e){return void 0!==this.next_node&&this.disconnect(),void 0!==e&&void 0!==e.input&&(this.next_node=e,i.connect(this.next_node.input),!0)},this.disconnect=function(){void 0!==this.next_node&&(i.disconnect(this.next_node.input),this.next_node=void 0)},this.destroy=function(){e.destroy()},Object.defineProperties(this,{handleEvent:{value:function(e){n.dispatchEvent(new Event(e.type))}},addEventListener:{value:function(e,t,r){return n.addEventListener(e,t,r)}},removeEventListener:{value:function(e,t,r){return n.removeEventListener(e,t,r)}},node:{value:e},input:{get:function(){return r}},output:{get:function(){return i}},bypassed:{get:function(){return t}}})}function i(e){var t=e.context.createGain();e.getOutputs()[0].connect(t),this.destroy=function(){e.destroy()},Object.defineProperties(this,{node:{value:e},output:{get:function(){return t}}})}function a(e,t){var n=this;function a(e,t){if(t)return t.then(loadResource(e));var n=loadResource(e);return n.then((function(e){if(void 0!==e.resources&&e.resources.length>0)for(var t=0;t<e.resources.length;t++)n=a(e.resources[t],n)})),n}function u(e){var t=document.createElement("link");t.setAttribute("rel","stylesheet"),t.setAttribute("type","text/css"),t.setAttribute("href",e),document.getElementsByTagName("head")[0].appendChild(t)}function o(e){return e.hasOwnProperty("length")&&e.length>0?o(e[e.length-1]):e.hasOwnProperty("resources")?o(e.resources):e.test}Object.defineProperties(this,{name:{value:e.prototype.name},proto:{value:e},version:{value:e.prototype.version},uniqueID:{value:e.prototype.uniqueID},hasMidiInput:{value:e.prototype.hasMidiInput||!1},hasMidiOutput:{value:e.prototype.hasMidiOutput||!1}}),this.createPluginInstance=async function(a,u){var o=function(a){return Promise.all(s).then((function(){return new Promise((function(n,r){!function(){for(var e=!0,t=0;t<s.length;t++)if(1!==s[t].state||!s[t].test()){e=!1;break}return e}()?r(new Error("Plugin not ready")):n(new e(t,a))}))})).then((function(e){return new Promise((function(t,n){if(e.initialise)return e.initialise().then((function(){t(e)}));t(e)}))})).then((function(a){var u;if(!0!==a.hasMidiInput&&!0!==a.hasMidiOutput)u=new r(a);else{if(!0!==a.hasMidiInput||!0===a.hasMidiOutput)throw"No Instance Holder Available!";u=new i(a)}return Object.defineProperties(a,{pluginInstance:{value:u},prototypeObject:{value:n},name:{value:e.prototype.name},version:{value:e.prototype.version},uniqueID:{value:e.prototype.uniqueID},SesionData:{value:t.SessionData},UserData:{value:t.UserData}}),Object.defineProperties(u,{prototypeObject:{value:n},externalInterface:{value:a.externalInterface}}),t.registerPluginInstance(u),u}))}(a);return!0===u||await o,o};var s=[];if(e.prototype.resources)for(var c=0;c<e.prototype.resources.length;c++){var f=e.prototype.resources[c];switch(f.type=f.type.toLowerCase(),f.type){case"css":u(f.url);break;case"javascript":var l={promise:a(f),state:0,complete:function(){this.state=1},test:o(f)};l.promise.then(l.complete.bind(l)),s.push(l);break;default:throw"Could not load "+f.url+", invalid resource.type"}}this.getResourcePromises=function(){return s}}n.d(t,"a",(function(){return a}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(1);function i(e,t,n,r,i){var a,u,o,s=new EventTarget;a=u=function(e){return e},o=function(){},"string"==typeof r&&0!=r.length||(r=t),void 0===i&&(i=!0),"boolean"!=typeof i&&(console.warn("exposed parameter is not of type boolean, assuming exposed = true"),i=!0),Object.defineProperties(this,{addEventListener:{value:function(e,t,n){return s.addEventListener(e,t,n)}},removeEventListener:{value:function(e,t,n){return s.removeEventListener(e,t,n)}},triggerParameterSet:{value:function(e){var t={detail:{parameter:this,updateInterfaces:e}};s.dispatchEvent(new CustomEvent("parameterset",t))}},name:{value:t},owner:{value:e},visibleName:{value:r},exposed:{value:i},update:{get:function(){return a},set:function(e){if("function"!=typeof e)throw"Must be a callback function";if(void 0===e(0))throw"Function must return a value";a=e}},translate:{get:function(){return u},set:function(e){if("function"!=typeof e)throw"Must be a callback function";if(void 0===e(0))throw"Function must return a value";u=e}},trigger:{get:function(){return o},set:function(e){if("function"!=typeof e)throw"Must be a callback function";o=e}},bindToAudioParam:{configurable:!0,value:function(e){throw"Cannot bind this parameter type to an audio parameter"}},boundAudioParam:{configurable:!0,get:function(){}}})}var a=function(e,t,n,r){if("number"!=typeof t||!isFinite(t)||t<0)throw"Invalid Constructor: Time must be a positive number";if("number"!=typeof n||!isFinite(n))throw"Invalid Constructor: Value must be a number";Object.defineProperties(this,{time:{get:function(){return t},set:function(e){return this.setTime(e)}},value:{get:function(){return n},set:function(e){return this.setValue(e)}},setValue:{value:function(t){if("number"!=typeof t||!isFinite(t))throw"Value must be a number";return n=Math.min(Math.max(t,e.minimum),e.maximum)}},setTime:{value:function(e){return"number"==typeof e&&isFinite(e)&&e>=0&&(t=e),t}},toString:{value:function(){return"function"==typeof r?r.call(this,n):String(n)}},owner:{value:e}})},u=function(e,t,n){function r(e,t){return e.find((function(e){return e.time==t}))}function i(e){return e.sort((function(e,t){return e.time>t.time?1:-1}))}if("number"!=typeof e||!isFinite(e))throw"Invalid Constructor: min_value be a number";if("number"!=typeof t||!isFinite(t))throw"Invalid Constructor: max_value be a number";if(e==t)throw"Invalid Constructor: max_value cannot equal to min_value";if(t<e)throw"Invalid Constructor: min_value cannot be greater than max_value";var u=[];Object.defineProperties(this,{insertPoint:{value:function(o,s){if("number"!=typeof o||!isFinite(o)||o<0)throw"Time must be a positive number";if("number"!=typeof s||!isFinite(s))throw"Value must be a number";if(function(e,t){return void 0!==r(e,t)}(u,o))throw"Already a value entry at time "+o;s=Math.min(Math.max(s,e),t);var c=new a(this,o,s,n);return u.push(c),u=i(u),c}},getPoints:{value:function(e,t){return void 0===e&&(e=0),void 0===t&&(t=1/0),u.filter((function(n){return n.time>=e&&n.time<t}))}},deletePoint:{value:function(e){var t=u.findIndex((function(t){return t.time==e}));return t>=0&&u.splice(t,1,0),u.length}},getStaticValueAsString:{writable:!0,value:function(e){return String(e)}},getValueAtTimePoint:{value:function(e){return r(u,e)}},length:{get:function(){return u.length}},minimum:{value:e},maximum:{value:t},updatePoint:{value:function(e,t){var n=u.find((function(t){return t.time==e}));if(n){if("number"==typeof t.time&&t.time!=n.time){if(r(u,e))throw'A time-point already exists at "'+String(t.time)+'" seconds';n.time=t.time,u=i(u)}n.value=t.value}return n}}})},o=function(e,t,n,r){u.call(this,t,n,r);var i=!1;Object.defineProperties(this,{enabled:{get:function(){return i},set:function(e){return this.length>0&&(i=!0===e),i}}})},s=function(e,t,n,r,i){function a(e,t){if(0==e.length)throw"No automation points available";if(1==e.length)return e[0].value;var n=e.reduce((function(e,n){return n.time<=t?n:e}),e[0]),r=e.find((function(e){return e.time>n.time}));return void 0===r||n.time>t?n.value:function(e,t,n){var r=t.time,i=n.time;e-=r,i-=r,r=0;var a=e/i;return t.value*(1-a)+n.value*a}(t,n,r)}o.call(this,t,n,r,i),Object.defineProperties(this,{getCurrentTimeValue:{value:function(e){return a(this.getPoints(),e)}},start:{value:function(n,r){this.enabled&&function(n,r,i){var u=e.update(a(n,r));t.setValueAtTime(u,i),n.forEach((function(n){if(n.time>r){var a=n.time-r,u=e.update(n.value);t.linearRampToValueAtTime(u,a+i)}}))}(this.getPoints(),n,r)}},stop:{value:function(e){!function(e){void 0===e&&(e=0),t.cancelScheduledValues(e)}(e)}}})};(s.prototype=Object.create(o.prototype)).constructor=s;var c=function(e,t,n,r,i){function a(e,t){if(0==e.length)throw"No automation points available";return 1==e.length?e[0].value:e.reduce((function(e,n){return n.time<=t?n:e}),e[0]).value}o.call(this,t,n,r,i),Object.defineProperties(this,{getCurrentTimeValue:{value:function(e){return a(this.getPoints(),e)}},start:{value:function(n,r){this.enabled&&function(n,r,i){var u=e.update(a(n,r));t.setValueAtTime(u,i),n.forEach((function(n){if(n.time>r){var a=n.time-r,u=e.update(n.value);t.setValueAtTime(u,a+i)}}))}(this.getPoints(),n,r)}},stop:{value:function(e){!function(e){t.cancelScheduledValues(e)}(e)}}})};function f(e,t,n,r,a,u,o,c){var f,l;i.call(this,e,t,"Number",o,c);var d,h=n;function p(t,n){if(l&&l.enabled)throw"Automation is enabled, cannot set the value!";this.minimum&&(t=Math.max(t,this.minimum)),this.maximum&&(t=Math.min(t,this.maximum)),d&&(t=Math.round(t/d),t*=d),t=this.update(t),f&&(l?f.setValueAtTime(t,e.factory.context.currentTime):f.value=t),h!==t&&(h=t,this.triggerParameterSet(n)),this.trigger()}Object.defineProperties(this,{type:{value:"Number"},destroy:{value:function(){e=t=n=r=a=h=d=void 0}},minimum:{value:r},maximum:{value:a},defaultValue:{value:n},value:{get:function(){if(f){if(l&&l.length>0){var t=e.factory.getCurrentProgramTime();return l.getCurrentTimeValue(t)}return this.translate(f.value)}return h},set:function(e){return p.call(this,e,!0)}},setValue:{value:function(e,t){return p.call(this,e,t)}},stepSize:{get:function(){return d},set:function(e){if(!isFinite(e)||e<0)throw"Invalid step size";d=e}},bindToAudioParam:{value:function(e){if("object"!=typeof e||null==e.value)throw"Argument 1 is not a valid AudioParameter object";(f=e).value=this.update(h),e.setValueAtTime?(l=new s(this,f,r,a,u),Object.defineProperties(this,{getValueAtTimePoint:{value:function(e){return this.automationPoints.getValueAtTimePoint(e)}},automationPoints:{value:l},start:{value:function(e,t){return l.start(e,t)}},stop:{value:function(e){l.stop(e)}},enabled:{get:function(){return l.enabled},set:function(e){return l.enabled=e}}})):console.warn("Cannot bind automation as AudioParameter is not automatable")}},boundAudioParam:{configurable:!0,get:function(){return f}},automatable:{get:function(){return"object"==typeof l}},toString:{value:function(e){return null==e&&(e=this.value),"function"==typeof u?u.call(this,e):String(e)}},getParameterObject:{value:function(){return{value:this.value,defaultValue:n,minimum:r,maximum:a,visibleName:t,type:"NumberParameter",name:t}}}})}function l(e,t,n,r,a,u,o){i.call(this,e,t,"String",u,o);var s,c=n;function f(e,t){if(r&&e.length>r)throw"String longer than "+r+" characters";this.boundAudioParam&&(this.boundAudioParam.value=this.update(e)),c!==e&&(c=e,this.triggerParameterSet(t)),this.trigger()}Object.defineProperties(this,{type:{value:"String"},destroy:{value:function(){e=t=n=r=c=void 0}},maxLength:{value:r},defaultValue:{value:n},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):c},set:function(e){return f.call(this,e,!0)}},setValue:{value:function(e,t){return f.call(this,e,t)}},bindToAudioParam:{value:function(e){if("object"!=typeof e||null==e.value)throw"Argument 1 is not a valid AudioParameter object";(s=e).value=this.update(c)}},boundAudioParam:{configurable:!0,get:function(){return s}},toString:{value:function(e){return null==e&&(e=this.value),"function"==typeof a?a.call(this,e):String(e)}},getParameterObject:{value:function(){return{value:this.value,defaultValue:n,maxLength:r,visibleName:t,type:"StringParameter",name:t}}}})}function d(e,t,n,r){i.call(this,e,t,"Button",n,r);var a=function(){};Object.defineProperties(this,{type:{value:"Button"},destroy:{value:function(){e=t=void 0}},onclick:{get:function(){return a},set:function(e){if("function"!=typeof e)throw"onclick must be a function";a=e}},getParameterObject:{value:function(){return{visibleName:t,type:"ButtonParameter",name:t}}}})}function h(e,t,n,r,a,u,o,s){i.call(this,e,t,"Button",o,s);var f,l,d=n;function h(e,t){if(e<r)throw"Set value is less than "+r;if(e>a)throw"Set value is greater than "+a;return this.boundAudioParam&&(this.boundAudioParam.value=this.update(e)),d!==e&&(d=e,this.triggerParameterSet(t)),this.trigger(),e}Object.defineProperties(this,{type:{value:"Switch"},destroy:{value:function(){e=t=void 0}},defaultValue:{value:n},minState:{value:r},maxState:{value:a},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):d},set:function(e){return h.call(this,e)}},setValue:{value:function(e,t){return h.call(this,e,t)}},increment:{value:function(){var e=d+1;return e>a&&(e=r),h.call(this,e)}},decrement:{value:function(){var e=d-1;return e<r&&(e=a),h.call(this,e)}},bindToAudioParam:{value:function(e){if("object"!=typeof e||null==e.value)throw"Argument 1 is not a valid AudioParameter object";(f=e).value=this.update(d),e.setValueAtTime?(l=new c(this,f,r,a,u),Object.defineProperties(this,{getValueAtTimePoint:{value:function(e){return this.automationPoints.getValueAtTimePoint(e)}},automationPoints:{value:l},start:{value:function(e,t){return l.start(e,t)}},stop:{value:function(e){l.stop(e)}},enabled:{get:function(){return l.enabled},set:function(e){return l.enabled=e}}})):console.warn("Cannot bind automation as AudioParameter is not automatable")}},boundAudioParam:{configurable:!0,get:function(){return f}},automatable:{get:function(){return"object"==typeof l}},toString:{value:function(e){return null==e&&(e=this.value),"function"==typeof u?u.call(this,e):String(e)}},getParameterObject:{value:function(){return{value:this.value,defaultValue:n,minimum:r,maximum:a,visibleName:t,type:"SwitchParameter",name:t}}}})}function p(e,t,n,r,a,u,o){var s,f;i.call(this,e,t,"Button",u,o);var l=r.indexOf(n);function d(e,t){var n=r.indexOf(e);if(void 0===n||n<0)throw"Not in list range";return this.boundAudioParam&&(this.boundAudioParam.value=this.update(e)),l!==n&&(l=n,this.triggerParameterSet(t)),this.trigger(),r[l]}Object.defineProperties(this,{type:{value:"List"},destroy:{value:function(){e=t=void 0}},defaultValue:{value:n},listValues:{value:r},value:{get:function(){return s?this.translate(s.value):r[l]},set:function(e){return d.call(this,e,!0)}},setValue:{value:function(e,t){return d.call(this,e,t)}},increment:{value:function(){var e=l+1;return e>=r.length&&(e=0),d.call(this,e)}},decrement:{value:function(){var e=l-1;return e<0&&(e=r.length-1),d.call(this,e)}},bindToAudioParam:{value:function(e){if("object"!=typeof e||null==e.value)throw"Argument 1 is not a valid AudioParameter object";(s=e).value=this.update(r[l]),e.setValueAtTime?(f=new c(this,s,0,listValues.length,a),Object.defineProperties(this,{getValueAtTimePoint:{value:function(e){return this.automationPoints.getValueAtTimePoint(e)}},automationPoints:{value:f},start:{value:function(e,t){return f.start(e,t)}},stop:{value:function(e){f.stop(e)}},enabled:{get:function(){return f.enabled},set:function(e){return f.enabled=e}}})):console.warn("Cannot bind automation as AudioParameter is not automatable")}},boundAudioParam:{configurable:!0,get:function(){return s}},automatable:{get:function(){return"object"==typeof f}},addOptionToList:{value:function(e){var t=typeof e;if("string"!=t&&"number"!=t)throw"ListParameter::addOptionToList Argument 1 must be of type string or number";if(r.includes(e))throw"ListParameter::addOptionToList Argument 1 contains a value already in the list options";return r.push(e),r}},deleteOptionFromList:{value:function(e){var t=r.indexOf(e);r[l];if(-1==t)throw'ListParameter::deleteOptionFromList item "'+e+'" does not exist in this list';return r.splice(t,1),l%=r.length,r}},toString:{value:function(e){return null==e&&(e=this.value),"function"==typeof a?a.call(this,e):String(e)}},getParameterObject:{value:function(){return{value:this.value,options:r,defaultValue:n,minimum:0,maximum:r.length,visibleName:t,type:"ListParameter",name:t}}}})}function m(e,t,n,r,a,u,o){i.call(this,e,t,"String",u,o);var s,c=n;function f(e,t){if(r&&e.length>r)throw"String longer than "+r+" characters";c!==e&&(s=void 0,c=e,this.triggerParameterSet(t)),this.trigger()}Object.defineProperties(this,{type:{value:"URL"},destroy:{value:function(){e=t=n=r=c=void 0}},maxLength:{value:r},defaultValue:{value:n},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):c},set:function(e){return f.call(this,e,!0)}},setValue:{value:function(e,t){return f.call(this,e,t)}},getResource:{value:function(e){return null==s&&(s=new Promise((function(t,n){var r=new XMLHttpRequest;r.open("GET",c),r.responseType=e,r.onload=function(e){200==r.status?t(e.target.response):n({code:r.status,message:e.target})},r.onerror=function(e){n({code:r.status,message:"error"})},r.ontimeout=function(e){n({code:r.status,message:"timeout"})},r.send()}))),s}},toString:{value:function(e){return null==e&&(e=this.value),"function"==typeof a?a.call(this,e):String(e)}},getParameterObject:{value:function(){return{value:this.value,defaultValue:n,maxLength:r,visibleName:t,type:"URLParameter",name:t}}}})}function v(e,t,n,r,a){i.call(this,e,n,"String",r,a);var u,o,s,c=e.factory.pluginAssets.assetPacks.filter((function(e){return e.resourceType==t})).map((function(e){return e.assetObjects})).flat(),f=new p(e,n+" list",c[0],c,(function(e){return e.url}),n+" list",!1);function l(){f.value.fetch().then((function(e){u=e,"function"==typeof o&&o(e)}),(function(e){"function"==typeof s&&s(e)}))}function d(e,t){"object"==typeof e&&e.hasOwnProperty("url")&&(e=e.url);var n=f.value.url,r=f.listValues.find((function(t){return t.url==e}));return r&&(f.value=r),f.value.url!=n&&(l(),this.triggerParameterSet(t)),this.trigger(),f.value}Object.defineProperties(this,{onload:{get:function(){return o},set:function(e){if("function"!=typeof e)throw"AssetParameter::onload requires a function with one argument to be set";return o=e,u&&o(u),o}},onerror:{get:function(){return s},set:function(e){if("function"!=typeof e)throw"AssetParameter::onerror requires a function with one argument to be set";return s=e}},type:{value:"Asset"},destroy:{value:function(){f.destroy(),e=n=defaultValue=f=void 0}},value:{get:function(){return f.value.url},set:function(e){return d.call(this,e,!0),f.value.url}},setValue:{value:function(e,t){return d.call(this,e,t)}},getResource:{value:function(){return audioBufferPromise||l()}},buffer:{get:function(){return u}},toString:{value:function(e){return f.toString(e)}},options:{get:function(){return f.listValues}},getParameterObject:{value:function(){return{value:f.value.toJSON(),options:f.listValues.map((function(e){return e.toJSON()})),loaded:void 0!==u,visibleName:n,type:"AssetParameter",name:n}}}}),l()}(c.prototype=Object.create(o.prototype)).constructor=c,f.prototype=Object.create(i.prototype),f.prototype.constructor=f,l.prototype=Object.create(i.prototype),l.prototype.constructor=l,d.prototype=Object.create(i.prototype),d.prototype.constructor=d,h.prototype=Object.create(i.prototype),h.prototype.constructor=h,p.prototype=Object.create(i.prototype),p.prototype.constructor=p,m.prototype=Object.create(i.prototype),m.prototype.constructor=m,v.prototype=Object.create(i.prototype),v.prototype.constructor=v;var g=function(e,t,n,r){var i=[],a=new EventTarget;function u(e,t){return t.split(".").reduce((function(e,t){return e[t]}),e)}function o(e,t){if(!/^\w+( \w+)*$/.test(t))throw"Invalid string for name";if(e.hasOwnProperty(t))throw"Name is reserved or already defined";return!0}function s(){var e={};return i.filter((function(e){return e.exposed})).forEach((function(t){e[t.name]=t})),e}function c(e,t){if(e.name.includes("."))throw"Name cannot include a period";return-1===i.findIndex((function(t){return t===e}),e)&&(Object.defineProperty(t,e.name,{value:e}),i.push(e)),e}null==n&&(n="default"),null!=r&&"default"!=n||(r=!0),Object.defineProperties(this,{addEventListener:{value:function(e,t,n){return a.addEventListener(e,t,n)}},removeEventListener:{value:function(e,t,n){return a.removeEventListener(e,t,n)}},handleEvent:{value:function(e){var n=e.detail;!1!==n.updateInterfaces&&t.updateInterfaces(),"parameterset"==e.type&&a.dispatchEvent(new CustomEvent("parameterset",{detail:n.parameter}))}},createNumberParameter:{value:function(t,n,r,i,a,u,s){if("string"!=typeof t||"number"!=typeof n||void 0!==r&&"number"!=typeof r||void 0!==i&&"number"!=typeof i)throw"Invlid constructor";if("function"!=typeof a&&void 0!==a)throw"toStringFunc must be a function or undefined";if(o(this,t)){var l=new f(e,t,n,r,i,a,u,s);return c(l,this),l.addEventListener("parameterset",this),l}}},createStringParameter:{value:function(t,n,r,i,a,u){if("string"!=typeof t||"string"!=typeof n||void 0!==r&&"number"!=typeof r)throw"Invlid constructor";if("function"!=typeof i&&void 0!==i)throw"toStringFunc must be a function or undefined";if(o(this,t)){var s=new l(e,t,n,r,i,a,u);return c(s,this),s.addEventListener("parameterset",this),s}}},createButtonParameter:{value:function(t){if("string"!=typeof t)throw"Invalid constructor";if(o(this,t)){var n=new d(e,t);return c(n,this),n.addEventListener("parameterset",this),n}}},createSwitchParameter:{value:function(t,n,r,i,a,u,s){if("string"!=typeof t||"number"!=typeof n||"number"!=typeof r||"number"!=typeof i)throw"Invlid constructor";if("function"!=typeof a&&void 0!==a)throw"toStringFunc must be a function or undefined";if(o(this,t)){var f=new h(e,t,n,r,i,a,u,s);return c(f,this),f.addEventListener("parameterset",this),f}}},createListParameter:{value:function(t,n,r,i,a,u){if("string"!=typeof t||void 0===n||!Array.isArray(r))throw"Invlid constructor";if("function"!=typeof i&&void 0!==i)throw"toStringFunc must be a function or undefined";if(!1===r.includes(n))throw"Invlid constructor - default value missing";if(o(this,t)){var s=new p(e,t,n,r,i,a,u);return c(s,this),s.addEventListener("parameterset",this),s}}},createURLParameter:{value:function(t,n,r,i,a,u){if("string"!=typeof t||void 0!==r&&"number"!=typeof r)throw"Invlid constructor";if("function"!=typeof i&&void 0!==i)throw"toStringFunc must be a function or undefined";if(o(this,t)){var s=new m(e,t,n,r,i,a,u);return c(s,this),s.addEventListener("parameterset",this),s}}},createAssetParameter:{value:function(t,n,r,i,a){if("string"!=typeof n)throw"Invlid constructor";if(o(this,n)){var u=new v(e,t,n,r,i,a);return c(u,this),u.addEventListener("parameterset",this),u}}},createParameterManager:{value:function(n){if(o(this,n)){var r=new g(e,t,n);return c(r,this),r}}},createParameter:{value:function(){throw"This function is now deprecated"}},getParameterName:{value:function(){return console.error("DEPRECATED - use getParameterNames"),this.getParameterNames()}},getParameterByName:{value:function(e){return u(this,e)}},getParameterObject:{value:function(){return s()}},getParameterNames:{value:function(){return i.filter((function(e){return e.exposed})).map((function(e){return e.constructor==this.constructor?e.getParameterNames().map((function(e){return this.name+"."+e}),e).flat():e.name}),this).flat()}},setParameterByName:{value:function(e,t,n){var r=u(this,e);if(r){if(!1===r.exposed)throw"Cannot set hidden parameter";r.setValue(t,n)}}},deleteParameter:{value:function(e){var t=i.findIndex((function(t){return t===e}),e);return t>=0&&(i.splice(t,1),e.destroy(),!0)}},deleteAllParameters:{value:function(e){return i.forEach((function(e){e.destroy()})),i=[],!0}},setParametersByObject:{value:function(e,t){var n;for(n in e)if(e.hasOwnProperty(n))if("object"==typeof e[n])this.setParameterByName(n,e[n].value,t);else{if("number"!=typeof e[n]&&"string"!=typeof e[n])throw"Cannot set "+n+": Not a valid object";this.setParameterByName(n,e[n],t)}}},toJSON:{value:function(){return i.filter((function(e){return e.exposed})).reduce((function(e,t){return t.hasOwnProperty("toJSON")?e[t.name]=t.toJSON():t.hasOwnProperty("getParameterObject")?e[t.name]=t.getParameterObject():t.hasOwnProperty("toString")?e[t.name]=t.toString():t.hasOwnProperty("value")&&(e[t.name]=t.value),e}),{})}},parameters:{get:function(){return s()},set:function(){throw"Cannot set, use .setParameterBy...()"}},exposed:{get:function(){return r}},name:{get:function(){return n}}})},y=function(e){function t(t,n){var r=e.parameters.getParameterNames(),i={};return void 0!==n&&null!=n.length||(n=r),r.filter((function(e){return this.includes(e)}),n).forEach((function(t){var n=e.parameters.getParameterByName(t);i[t]=n.getParameterObject(),i[t].name=t,n.automation&&(i[t].automated=n.automation.enabled)})),i}function n(e,n){var r={message:"updateParameters",parameters:t(0,n)};return e&&(r.sender_id=e),r}function r(e,t){e.postMessage(n(void 0,t),location.origin)}function i(e,t){var r=n(e,t);u.forEach((function(e){e.postMessage(r,location.origin)}))}function a(e,t,n){var r={message:"updateState",level:e,term:t,value:n};u.forEach((function(e){e.postMessage(r,location.origin)}))}var u=[],o=new EventTarget;window.addEventListener("message",(function(t){if(u.includes(t.source))switch(t.data.message){case"setParameterByName":var n;t.data.parameter.name&&(n=e.parameters.getParameterByName(t.data.parameter.name))&&(n.setValue(t.data.parameter.value,!1),i(t.data.sender_id,[t.data.parameter.name]));break;case"setParametersByObject":if(t.data.parameter){var o=function(t){var n=[],r=JSON.parse(t.message.parameters);return Object.keys(r).forEach((function(t){var i=e.parameters.getParameterByName(t);i&&(i.setValue(r[t].value,!1),n.push(t))})),n}(t);i(t.data.sender_id,o)}break;case"requestParameters":"string"==typeof t.data.name?r(t.source,t.data.name):r(t.source);break;case"requestSessionState":a("session",t.data.term,e.sessionDataInterface.requestTerm(t.data.term));break;case"requestTrackState":a("track",t.data.term,e.trackDataInterface.requestTerm(t.data.term));break;case"requestUserState":a("user",t.data.term,e.userDataInterface.requestTerm(t.data.term));break;case"requestPluginState":a("plugin",t.data.term,e.pluginDataInterface.requestTerm(t.data.term));break;case"customMessage":break;default:throw'Unknown message type "'+t.data.message+'"'}})),Object.defineProperties(this,{addEventListener:{value:function(e,t,n){return o.addEventListener(e,t,n)}},removeEventListener:{value:function(e,t,n){return o.removeEventListener(e,t,n)}},sendState:{value:function(t,n){if("session"==t)a("session",n,e.sessionDataInterface.requestTerm(n));else if("track"==t)a("track",n,e.trackDataInterface.requestTerm(n));else if("user"==t)a("user",n,e.userDataInterface.requestTerm(n));else{if("plugin"!=t)throw"Invalid state level option";a("plugin",n,e.pluginDataInterface.requestTerm(n))}}},updateInterfaces:{value:function(t){var n;(void 0===t&&(t=!1),t)?(n=e.parameters.getParameterNames().filter((function(t){var n=e.parameters.getParameterByName(t);return n.automatable&&!0===n.enabled}))).length>0&&i(void 0,n):i()}},closeWindows:{value:function(){for(1;u.length>0;){u.pop().close()}}},registerWindow:{value:function(t){return u.includes(t)&&u.splice(u.indexOf(t),1),u.push(t),t.pluginInstance=e,r(t),!0}},removeWindow:{value:function(e){u.includes(e)&&u.splice(u.indexOf(e),1)}}})},b=function(e,t){function n(e,t){if(void 0===e)throw"Source plugin must be defined";if(void 0===t)throw"FeatureObject must be defined";if("number"!=typeof t.outputIndex||"number"!=typeof t.frameSize||"object"!=typeof t.features)throw"Malformed featureObject";return!0}var r=function(){};this.requestFeatures=function(e){var t;for(t=0;t<e.length;t++)this.requestFeaturesFromPlugin(e[t].plugin,{outputIndex:e[t].outputIndex,frameSize:e[t].frameSize,features:e[t].features})},this.requestFeaturesFromPlugin=function(r,i){n(r,i),t.requestFeatures(e.plugin,r,i)},this.cancelFeaturesFromPlugin=function(r,i){n(r,i),t.deleteFeatures(e.plugin,r,i)},this.cancelAllFeaturesFromPlugin=function(n){if(void 0===n)throw"Source plugin must be defined";t.deleteFeatures(e.plugin,n)},this.cancelAllFeatures=function(){t.deleteFeatures(e.plugin)},this.postFeatures=function(e){"function"==typeof r&&r(e)},Object.defineProperty(this,"onfeatures",{get:function(){return r},set:function(e){return"function"==typeof e&&(r=e,!0)}})},P=function(e,t){var n=function(t,n,r){var i=[],a=function(t,n){this.extractor=e.plugin.factory.context.createAnalyser(),this.extractor.fftSize=n,t.connect(this.extractor),this.features=[],Object.defineProperty(this,"frameSize",{value:n});var r=this.factory.recursiveProcessing;function i(e){var t={numberOfChannels:1,results:[]};r(e,this.features),t.results[0]={channel:0,results:JSON.parse(e.toJSON())},this.postFeatures(e.length,t)}this.setFeatures=function(e){this.features=e,0===this.features.length?this.extractor.clearCallback():this.extractor.frameCallback(i,this)}},u=function(t,n){function r(e){var t,n=[];for(t=0;t<e.inputBuffer.numberOfChannels;t++)n[t]=e.inputBuffer.getChannelData(t);a.postMessage({state:2,frames:n})}function i(e){this.postFeatures(n,e.data.response)}var a=new Worker("jsap/feature-worker.js");a.onerror=function(e){console.error(e)},this.setFeatures=function(n){var u=this,o={state:1,sampleRate:e.plugin.factory.context.sampleRate,featureList:n,numChannels:t.numberOfOutputs,frameSize:this.frameSize};this.features=n,n&&n.length>0?(a.onmessage=function(e){1===e.data.state?(a.onmessage=i.bind(u),u.extractor.onaudioprocess=r.bind(u)):a.postMessage(o)},a.postMessage({state:0})):this.extractor.onaudioprocess=void 0},this.extractor=e.plugin.factory.context.createScriptProcessor(n,t.numberOfOutputs,1),t.connect(this.extractor),this.extractor.connect(e.plugin.factory.context.destination),Object.defineProperty(this,"frameSize",{value:n})};this.addExtractor=function(e){var t;return t=window.Worker?new u(n,e):new a(n,e),i.push(t),Object.defineProperty(t,"postFeatures",{value:function(e,t){var n={outputIndex:r,frameSize:e,results:t};this.postFeatures(n)}.bind(this)}),t},this.findExtractor=function(e){var t=e;return i.find((function(e){return e.frameSize===t}))},this.deleteExtractor=function(e){}},r=[];this.updateFeatures=function(t){var i;for(i=0;i<t.length;i++){if(void 0===r[i]){if(i>e.plugin.numOutputs)throw"Requested an output that does not exist";r[i]=new n(e.plugin,e.plugin.outputs[i],i),Object.defineProperty(r[i],"postFeatures",{value:function(e){this.postFeatures(e)}.bind(this)})}var a;for(a=0;a<t[i].length;a++){var u=r[i].findExtractor(t[i][a].frameSize);u||(u=r[i].addExtractor(t[i][a].frameSize)),u.setFeatures(t[i][a].featureList)}}},this.postFeatures=function(t){e.plugin.factory.FeatureMap.postFeatures({plugin:e.plugin.pluginInstance,outputIndex:t.outputIndex,frameSize:t.frameSize,results:t.results})},t.createSourceMap(this,e.plugin.pluginInstance)},w=function(e){this.plugin=e,this.Receiver=new b(this,e.factory.FeatureMap),this.Sender=new P(this,e.factory.FeatureMap),Object.defineProperty(this,"onfeatures",{get:function(){return this.Receiver.onfeatures},set:function(e){return this.Receiver.onfeatures=e,e}})},O=function(e,t,n,r){this.input=e,this.processor=n,this.GUI=r,this.AudioParam=t,this.handleEvent=function(e){this.AudioParam.value=this.input.value},this.input.addEventListener("change",this),this.input.addEventListener("mousemove",this),this.input.addEventListener("click",this)},S=function(e,t,n){console.log("DEPRECATED!!"),console.log("The class PluginUserInterface has been deprecated"),console.log("Please look at the documents for the new methods for building plugins"),this.processor=e,this.root=document.createElement("div"),t>0&&(this.root.style.width=t+"px"),n>0&&(this.root.style.height=n+"px"),this.dim={width:t,height:n},this.intervalFunction=null,this.updateInterval=null,this.PluginParameterInterfaces=[],this.createPluginParameterInterfaceNode=function(e,t){var n=new O(e,t,this.processor,this);return this.PluginParameterInterfaces.push(n),n},this.update=function(){}};S.prototype.getRoot=function(){return this.root},S.prototype.getDimensions=function(){return this.dim},S.prototype.getWidth=function(){return this.dim.width},S.prototype.getHeight=function(){return this.dim.height},S.prototype.beginCallbacks=function(e){void 0===e&&(e=250),null===this.intervalFunction&&(this.updateInterval=e,this.intervalFunction=window.setInterval(function(){this.update()}.bind(this),250))},S.prototype.stopCallbacks=function(){null!==this.intervalFunction&&(window.clearInterval(this.intervalFunction),this.updateInterval=null,this.intervalFunction=null)},S.prototype.loadResource=function(e){return new Promise((function(t,n){var r=new XMLHttpRequest;r.open("GET",e),r.onload=function(){200===r.status?t(r.response):n(Error(r.statusText))},r.onerror=function(){n(Error("Network Error"))},r.send()}))},S.prototype.clearGUI=function(){this.stopCallbacks(),this.root.innerHTML=""};var A=n(0);function j(e,t){function n(t){var n=t.detail.term,i=t.detail.value;r[n]&&"function"==typeof r[n]&&r[n].call(e,i)}var r={};t.addEventListener("altered",n),Object.defineProperties(this,{destroy:{value:function(){t.removeEventListener("altered",n)}},requestTerm:{value:function(e){return t.getTerm(e)}},listenForTerm:{value:function(e,t){if(r.hasOwnProperty(e))throw"Listener already exists";r[e]=t}},releaseListenerForTerm:{value:function(e){r[e]=void 0}}})}function E(e,t,n,r,i){var a=t.pluginAssets.createAssetPackSelector(e,t.pluginAssets.assetPacks[0]),u=e.parameters.createListParameter(n,t.pluginAssets.assetPacks[0].name,t.pluginAssets.assetPacks.map(e=>e.name),void 0,r,i);u.trigger=function(){var e=t.pluginAssets.assetPacks.find(e=>u.value==e.name);a.selectPack(e)},Object.defineProperties(this,{parameter:{value:u},availablePacks:{get:function(){return t.pluginAssets.assetPacks}},selectPack:{value:function(e){return u.value=e}},selectedPack:{get:function(){return u.value}},loadAssets:{value:a.loadAssets},allAssetsLoaded:{value:a.allAssetsLoaded},fetchAssetByName:{value:a.fetchAssetByName},waitForAssets:{value:a.waitForAssets},value:{get:function(){return u.value},set:function(e){return u.value=e}},onload:{get:function(){return a.onload},set:function(e){return a.onload=e}},onerror:{get:function(){return a.onerror},set:function(e){return a.onerror=e}}})}"function"==typeof AudioNode&&void 0===window.importScripts&&(AudioNode.prototype.getInputs=function(){return[this]});var x=function(e,t){var n=[],r=[],i=t,a=0,u=new EventTarget,o=new y(this);function s(e,t){var n=t.findIndex((function(e){return e===this}),e);return-1!==n&&(t.splice(n,1),!0)}void 0===this.context&&(this.context=e.context),void 0===this.factory&&(this.factory=e),this.featureMap=new w(this),this.parameters=new g(this,o),this.parameters.addEventListener("parameterset",(function(e){u.dispatchEvent(new CustomEvent("parameterset",{detail:e.detail}))})),this.addAssetPackInterface=function(t,n,r){return new E(this,e,t,n,r)},this.PluginData=new A.a("Plugin"),this.sessionDataInterface=new j(this,e.SessionData),this.userDataInterface=new j(this,e.UserData),this.trackDataInterface=new j(this,t.TrackData),this.pluginDataInterface=new j(this,this.PluginData),this.delete=function(){this.sessionDataInterface.destroy(),this.userDataInterface.destroy(),this.trackDataInterface.destroy(),this.pluginDataInterface.destroy(),this.deconstruct&&"function"==typeof this.deconstruct&&this.deconstruct()},this.addInput=function(e){return n.push(e),n},this.deleteInput=function(e){return s(e,n)},this.addOutput=function(e){return r.push(e),this.outputs},this.deleteOutput=function(e){return s(e,r)},this.setProcessingDelayAsSeconds=function(t){var n=e.context.sampleRate;if("number"==typeof t&&isFinite(t)&&t>=0)return this.setProcessingDelayAsSamples(t*n)/n;throw"setProcessingDelayAsSeconds Invalid argument"},this.setProcessingDelayAsSamples=function(e){if("number"==typeof e&&isFinite(e)&&e>=0){a=e;var t=new Event("alterdelay");return u.dispatchEvent(t),a}throw"setProcessingDelayAsSamples Invalid argument"},this.start=this.stop=this.onloaded=this.onunloaded=this.deconstruct=function(){},Object.defineProperties(this,{externalInterface:{value:o},numInputs:{get:function(){return n.length},set:function(){throw"Cannot set the number of inputs of BasePlugin"}},numOutputs:{get:function(){return r.length},set:function(){throw"Cannot set the number of outputs of BasePlugin"}},numParameters:{get:function(){return this.parameters.parameters.length},set:function(){throw"Cannot set the number of parameters of BasePlugin"}},owner:{get:function(){return i},set:function(e){return"object"==typeof e&&(i=e),i}},inputs:{get:function(e){return n},set:function(){throw"Illegal attempt to modify BasePlugin"}},outputs:{get:function(e){return r},set:function(){throw"Illegal attempt to modify BasePlugin"}},processingDelayAsSamples:{get:function(){return a},set:this.setProcessingDelayAsSamples},processingDelayAsSeconds:{get:function(){return a/e.context.sampleRate},set:this.setProcessingDelayAsSeconds},connect:{value:function(e){this.outputs[0].connect(e.inpt?e.input:e)}},disconnect:{value:function(e){void 0===e?this.outputs[0].disconnect():this.outputs[0].disconnect(e.input?e.input:e)}},getInputs:{value:function(){return this.inputs}},getOutputs:{value:function(){return this.outputs}},getParameterNames:{value:function(){return this.parameters.getParameterNames()}},getParameterByName:{value:function(e){return this.parameters.getParameterByName(e)}},getParameterObject:{value:function(){return this.parameters.getParameterObject()}},setParameterByName:{value:function(e,t){return this.parameters.setParameterByName(e,t)}},setParametersByObject:{value:function(e){return this.parameters.setParametersByObject(e)}},addEventListener:{value:function(e,t){return u.addEventListener(e,t)}},removeEventListener:{value:function(e,t){return u.addEventListener(e,t)}}})},I=function(e,t){var n=!1,r=!1,i="roll";x.call(this,e,t),Object.defineProperties(this,{addInput:{value:function(){throw'Cannot add input to type "SynthesiserBasePlugin"'}},deleteInput:{value:function(){throw'Cannot delete input to type "SynthesiserBasePlugin"'}},scheduleEvent:{value:function(e,t){n||(console.warning("WARNING - .scheduleEvent is not overridden"),n=!0)},writable:!0},cancelAllEvents:{value:function(){r||(console.warning("WARNING - .cancelAllEvents is not overridden"),r=!0)},writable:!0},setEditorType:{value:function(e){return"roll"!=e&&"line"!=e&&"sequencer"!=e||(i=e),i}},getEditorType:{value:function(){return i}},isNoteActive:{value:function(e){return"number"==typeof e&&e>=0&&e<128},writable:!0},getActiveNoteProperties:{value:function(){for(var e=[],t=0;t<128;t++)e.push({code:t,name:this.midiNoteToName(t)});return e},writable:!0},midiNoteToFrequency:{value:function(e){return 440*Math.pow(2,(e-69)/12)}},frequencyToMidiNote:{value:function(e){return Math.round(12*Math.log2(e/440))+69}},midiNoteToName:{value:function(e){var t=e-21,n=Math.floor(t/12);return["A","A#","B","C","C#","D","D#","E","F","F#","G","G#"][Math.floor((t+36)%12)]+String(n)}},noteNameToMIDI:{value:function(e){return 12*Number(e.slice(e.length-1))+["A","A#","B","C","C#","D","D#","E","F","F#","G","G#"].indexOf(e.slice(0,e.length-1))+21}}})};(I.prototype=Object.create(x.prototype)).constructor=I;var F=function(e,t,n,r,i,a,u){var o=i;t.listenForParameterByName((function(e){o=e.value}),n,!0),Object.defineProperties(this,{name:{value:r},parameterName:{value:n},defaultValue:{value:i},maximum:{value:a},minimum:{value:u},value:{get:function(){return o},set:function(e){return"number"==typeof e&&(o=Math.max(u,Math.min(a,e))),o}},update:{value:function(e){t.setParameterByName(n,e)}}})};var N=function(e,t,n,r,i,a){var u=i;t.listenForParameterByName((function(e){u=e.value}),n,!0),Object.defineProperties(this,{name:{value:r},parameterName:{value:n},defaultValue:{value:i},maximum:{value:maximum},minimum:{value:minimum},value:{get:function(){return u},set:function(e){return a.includes(e)&&(u=e),u}},update:{value:function(e){t.setParameterByName(n,e)}}})};var L=function(e,t,n,r,i){var a=i;t.listenForParameterByName((function(e){a=e.value}),n,!0),Object.defineProperties(this,{name:{value:r},parameterName:{value:n},defaultValue:{value:i},maximum:{value:maximum},minimum:{value:minimum},value:{get:function(){return a},set:function(e){return"string"==typeof e&&(a=e),a}},update:{value:function(e){t.setParameterByName(n,e)}}})};var T=function(e,t,n,r,i,a,u){var o=i;t.listenForParameterByName((function(e){o=e.value}),n,!0),Object.defineProperties(this,{name:{value:r},parameterName:{value:n},defaultValue:{value:i},maximum:{value:maximum},minimum:{value:minimum},value:{get:function(){return o},set:function(e){return"number"==typeof e&&(o=Math.max(u,Math.min(a,e))),o}},increment:{value:function(){var e=o+1;return e>a&&(e=u),o=e}},decrement:{value:function(){var e=o-1;return e<u&&(e=a),o=e}},update:{value:function(e){t.setParameterByName(n,e)}}})};var M=function(e){var t=[];Object.defineProperties(this,{createNumberParameterListener:{value:function(n,r,i,a,u){var o=new F(this,e,n,r,i,a,u);return t.push(o),o}},createListParameterListener:{value:function(n,r,i,a){var u=new N(this,e,n,r,i,a);return t.push(u),u}},createStringParameterListener:{value:function(n,r,i){var a=new L(this,e,n,r,i);return t.push(a),a}},createSwitchParameterListener:{value:function(n,r,i,a,u){var o=new T(this,e,n,r,i,a,u);return t.push(o),o}}})};function C(){function e(e){if(void 0===e||void 0===e.message)throw"Malformed message object";e.sender_id=r,t.postMessage(e,window.location.origin)}var t;window.opener?t=window.opener:window.parent&&(t=window.parent);var n,r=(n=new Uint8Array(16),window.crypto.getRandomValues(n),Array.from(n,(function(e){return("0"+e.toString(16)).substr(-2)})).join("")),i=[],a=[],u=[];window.onmessage=function(e){if(e.source==t&&e.data.sender_id!=r){var n;switch(e.data.message){case"updateParameters":n=new CustomEvent("parametersChanged",{detail:e.data});break;case"updateState":n=new CustomEvent("updateState",{detail:e.data});break;default:return}window.dispatchEvent(n)}},window.addEventListener("parametersChanged",(function(e){e.detail.parameters&&(Object.keys(e.detail.parameters).forEach((function(t){i.filter((function(e){return e.name==t||void 0===e.name})).forEach((function(n){n.callback(e.detail.parameters[t])}))})),a.forEach((function(t){t(e.detail.parameters)})))})),window.addEventListener("updateState",(function(e){u.filter((function(t){return t.level==e.detail.level&&t.term==e.detail.term})).forEach((function(t){t.callback(e.detail.value)}))})),this.parameterListenerManager=new M(this),Object.defineProperties(this,{pluginInstance:{get:function(){return window.pluginInstance}},setParameterByName:{value:function(t,n){if("string"!=typeof t)throw"Expects parameter name to be a string";e({message:"setParameterByName",parameter:{name:t,value:n}})}},setParameterByObject:{value:function(t){e({message:"setParameterByObject",parameters:t})}},requestParameters:{value:function(){e({message:"requestParameters"})}},requestParameterByName:{value:function(t){if("string"!=typeof t)throw"Name not set";e({message:"requestParameters",name:t})}},listenForParameterByName:{value:function(t,n,r){if(void 0===t||"function"!=typeof t)throw"Callback must be a defined function";return i.push({name:n,callback:t}),!1!==r&&e({message:"requestParameters",name:n}),i.length}},listenForParameters:{value:function(t,n){if(void 0===t||"function"!=typeof t)throw"Callback must be a defined function";return a.push(t),!1!==n&&e({message:"requestParameters"}),a.length}},listenForState:{value:function(e,t,n,r){if(void 0===e||"function"!=typeof e)throw"Callback must be a defined function";if("session"!=t&&"track"!=t&&"user"!=t&&"plugin"!=t)throw"Invalid state level given: "+String(t);return u.push({level:t,term:n,callback:e}),!1!==r&&this.requestState(t,n),u.length}},requestState:{value:function(t,n){var r="request"+t.charAt(0).toUpperCase()+t.slice(1)+"State";if("string"!=typeof name)throw"Name not set";e({message:r,term:n})}},sendCustomEvent:{value:function(t,n){e({message:"customMessage",detail:{type:t,payload:n}})}}})}n.d(t,"BasePluginEditorChannel",(function(){return C})),n.d(t,"BasePlugin",(function(){return x})),n.d(t,"SynthesiserBasePlugin",(function(){return I})),n.d(t,"PluginFactory",(function(){return r.a}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,