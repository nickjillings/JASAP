var JSAP=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";n.d(e,"a",function(){return r}),"function"==typeof AudioNode&&void 0===window.importScripts&&(AudioNode.prototype.getInputs=function(){return[this]});var r=function(t,e){var n=[],r=[],u=e,a=new EventTarget;function s(t,e){var n=e.findIndex(function(t){return t===this},t);return-1!==n&&(e.splice(n,1),!0)}void 0===this.context&&(this.context=t.context),void 0===this.factory&&(this.factory=t),this.featureMap=new o(this),this.externalInterface=new c(this),this.parameters=new i(this,this.externalInterface,a),this.addInput=function(t){return n.push(t),n},this.deleteInput=function(t){return s(t,n)},this.addOutput=function(t){return r.push(t),this.outputs},this.deleteOutput=function(t){return s(t,r)},this.start=this.stop=this.onloaded=this.onunloaded=this.deconstruct=function(){},Object.defineProperties(this,{numInputs:{get:function(){return n.length},set:function(){throw"Cannot set the number of inputs of BasePlugin"}},numOutputs:{get:function(){return r.length},set:function(){throw"Cannot set the number of outputs of BasePlugin"}},numParameters:{get:function(){return this.parameters.parameters.length},set:function(){throw"Cannot set the number of parameters of BasePlugin"}},owner:{get:function(){return u},set:function(t){return"object"==typeof t&&(u=t),u}},inputs:{get:function(t){return n},set:function(){throw"Illegal attempt to modify BasePlugin"}},outputs:{get:function(t){return r},set:function(){throw"Illegal attempt to modify BasePlugin"}},connect:{value:function(t){this.outputs[0].connect(t.inpt?t.input:t)}},disconnect:{value:function(t){void 0===t?this.outputs[0].disconnect():this.outputs[0].disconnect(t.input?t.input:t)}},getInputs:{value:function(){return this.inputs}},getOutputs:{value:function(){return this.outputs}},getParameterName:{value:function(){return this.parameters.getParameterNames()}},getParameterByName:{value:function(){return this.parameters.getParameterByName()}},getParameterObject:{value:function(){return this.parameters.getParameterObject()}},setParameterByName:{value:function(t,e){return this.parameters.setParameterByName(t,e)}},setParametersByObject:{value:function(t){return this.parameters.setParametersByObject(t)}},addEventListener:{value:function(t,e){return a.addEventListener(t,e)}},removeEventListener:{value:function(t,e){return a.addEventListener(t,e)}}})},i=function(t,e,n){var r=[];function i(t){return r.find(function(e){return e.name.toLowerCase()===t.toLowerCase()})}function o(t){return r.findIndex(function(e){return e.name.toLowerCase()===t.toLowerCase()})}function u(){var t={};return r.forEach(function(e){t[e.name]=e}),t}function a(t){return-1===r.findIndex(function(e){return e===t},t)&&r.push(t),t}function s(t,e,n){var r,i,o,u;r=i=function(t){return t},o=function(){},Object.defineProperties(this,{name:{value:e},owner:{value:t},update:{get:function(){return r},set:function(t){if("function"!=typeof t)throw"Must be a callback function";if(void 0===t(0))throw"Function must return a value";r=t}},translate:{get:function(){return i},set:function(t){if("function"!=typeof t)throw"Must be a callback function";if(void 0===t(0))throw"Function must return a value";i=t}},trigger:{get:function(){return o},set:function(t){if("function"!=typeof t)throw"Must be a callback function";o=t}},bindToAudioParam:{value:function(t){if("object"!=typeof t||void 0===t.value)throw"Must be an AudioParam object from an AudioNode";var e=this.update(this.value);(u=t).value=e}},boundAudioParam:{get:function(){return u}},actionList:{value:[]}})}function c(t,e,r,i,o){s.call(this,t,e,"Number");var u,a=r;Object.defineProperties(this,{destroy:{value:function(){t=e=r=i=o=a=u=void 0}},minimum:{value:i},maximum:{value:o},defaultValue:{value:r},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):a},set:function(t){if(this.minimum&&(t=Math.max(t,this.minimum)),this.maximum&&(t=Math.min(t,this.maximum)),u&&(t=Math.round(t/u),t*=u),this.boundAudioParam&&(this.boundAudioParam.value=this.update(t)),a!==t){a=t;var e=new Event("parameterset");n.dispatchEvent(e)}this.trigger()}},stepSize:{get:function(){return u},set:function(t){if(!isFinite(t)||t<0)throw"Invalid step size";u=t}}})}function f(t,e,r,i){s.call(this,t,e,"String");var o=r;Object.defineProperties(this,{destroy:{value:function(){t=e=r=i=o=void 0}},maxLength:{value:i},defaultValue:{value:r},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):o},set:function(t){if(i&&t.length>i)throw"String longer than "+i+" characters";if(this.boundAudioParam&&(this.boundAudioParam.value=this.update(t)),o!==t){o=t;var e=new Event("parameterset");n.dispatchEvent(e)}this.trigger()}}})}function l(t,e){s.call(this,t,e,"Button");var n=function(){};Object.defineProperties(this,{destroy:{value:function(){t=e=void 0}},onclick:{get:function(){return n},set:function(t){if("function"!=typeof t)throw"onclick must be a function";n=t}}})}function d(t,e,r,i,o){s.call(this,t,e,"Button");var u=r;function a(t){if(this.boundAudioParam&&(this.boundAudioParam.value=this.update(t)),function(t){var e={time:new Date,value:t};this.actionList.push(e)}.call(this,t),u!==t){u=t;var e=new Event("parameterset");n.dispatchEvent(e)}return this.trigger(),t}Object.defineProperties(this,{destroy:{value:function(){t=e=void 0}},defaultValue:{value:r},minState:{value:i},maxState:{value:o},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):u},set:function(t){if(t<i)throw"Set value is less than "+i;if(t>o)throw"Set value is greater than "+o;return a.call(this,t)}},increment:{value:function(){var t=u+1;return t>o&&(t=i),a.call(this,t)}},decrement:{value:function(){var t=u-1;return t<i&&(t=o),a.call(this,t)}}})}function h(t,e,r,i){s.call(this,t,e,"Button");var o=i.indexOf(r);function u(t){var e=i.indexOf(t);if(void 0===e||e<0)throw"Not in list range";if(this.boundAudioParam&&(this.boundAudioParam.value=this.update(t)),function(t){var e={time:new Date,value:t};this.actionList.push(e)}.call(this,t),o!==e){o=e;var r=new Event("parameterset");n.dispatchEvent(r)}return this.trigger(),i[o]}Object.defineProperties(this,{destroy:{value:function(){t=e=void 0}},defaultValue:{value:r},listValues:{get:function(){return i.map(function(t){return t})}},value:{get:function(){return this.boundAudioParam?this.translate(this.boundAudioParam.value):i[o]},set:function(t){return u.call(this,t)}},increment:{value:function(){var t=o+1;return t>=i.length&&(t=0),u.call(this,t)}},decrement:{value:function(){var t=o-1;return t<0&&(t=i.length-1),u.call(this,t)}}})}c.prototype=Object.create(s.prototype),c.prototype.constructor=c,f.prototype=Object.create(s.prototype),f.prototype.constructor=f,l.prototype=Object.create(s.prototype),l.prototype.constructor=l,d.prototype=Object.create(s.prototype),d.prototype.constructor=d,h.prototype=Object.create(s.prototype),h.prototype.constructor=h,Object.defineProperties(this,{createNumberParameter:{value:function(e,n,r,i){if("string"!=typeof e||"number"!=typeof n||void 0!==r&&"number"!=typeof r||void 0!==i&&"number"!=typeof i)throw"Invlid constructor";if(-1!==o(e))throw"Parameter with name '"+e+"' already exists";var u=new c(t,e,n,r,i);return a(u),u}},createStringParameter:{value:function(e,n,r){if("string"!=typeof e||"string"!=typeof n||void 0!==r&&"number"!=typeof r)throw"Invlid constructor";if(-1!==o(e))throw"Parameter with name '"+e+"' already exists";var i=new f(t,e,n,r);return a(i),i}},createButtonParameter:{value:function(e){if("string"!=typeof e)throw"Invalid constructor";if(-1!==o(e))throw"Parameter with name '"+e+"' already exists";var n=new l(t,e);return a(n),n}},createSwitchParameter:{value:function(e,n,r,i){if("string"!=typeof e||"number"!=typeof n||"number"!=typeof r||"number"!=typeof i)throw"Invlid constructor";if(-1!==o(e))throw"Parameter with name '"+e+"' already exists";var u=new d(t,e,n,r,i);return a(u),u}},createListParameter:{value:function(e,n,r){if("string"!=typeof e||void 0===n||!Array.isArray(r))throw"Invlid constructor";if(!1===r.includes(n)&&hrow("Invlid constructor - default value missing"),-1!==o(e))throw"Parameter with name '"+e+"' already exists";var i=new h(t,e,n,r);return a(i),i}},createParameter:{value:function(){throw"This function is now deprecated"}},getParameterName:{value:function(){var t,e=[];for(t=0;t<r.length;t++)e.push(r[t].name);return e}},getParameterByName:{value:function(t){return i(t)}},getParameterObject:{value:function(){return u()}},getParameterNames:{value:function(){var t=[];return r.forEach(function(e){t.push(e.name)}),t}},setParameterByName:{value:function(t,e){var n=i(t);n&&(n.value=e)}},deleteParameter:{value:function(t){var e=r.findIndex(function(e){return e===t},t);return e>=0&&(r.splice(e,1),t.destroy(),!0)}},deleteAllParameters:{value:function(t){return r.forEach(function(t){t.destroy()}),r=[],!0}},setParametersByObject:{value:function(t){var e;for(e in t)if(t.hasOwnProperty(e))if("object"==typeof t[e])this.setParameterByName(e,t[e].value);else{if("number"!=typeof t[e])throw"Cannot set "+e+": Not a valid object";this.setParameterByName(e,t[e])}}},parameters:{get:function(){return u()},set:function(){throw"Cannot set, use .setParameterBy...()"}}})},o=function(t){this.plugin=t,this.Receiver=new u(this,t.factory.FeatureMap),this.Sender=new a(this,t.factory.FeatureMap),Object.defineProperty(this,"onfeatures",{get:function(){return this.Receiver.onfeatures},set:function(t){return this.Receiver.onfeatures=t,t}})},u=function(t,e){function n(t,e){if(void 0===t)throw"Source plugin must be defined";if(void 0===e)throw"FeatureObject must be defined";if("number"!=typeof e.outputIndex||"number"!=typeof e.frameSize||"object"!=typeof e.features)throw"Malformed featureObject";return!0}var r=function(){};this.requestFeatures=function(t){var e;for(e=0;e<t.length;e++)this.requestFeaturesFromPlugin(t[e].plugin,{outputIndex:t[e].outputIndex,frameSize:t[e].frameSize,features:t[e].features})},this.requestFeaturesFromPlugin=function(r,i){n(r,i),e.requestFeatures(t.plugin,r,i)},this.cancelFeaturesFromPlugin=function(r,i){n(r,i),e.deleteFeatures(t.plugin,r,i)},this.cancelAllFeaturesFromPlugin=function(n){if(void 0===n)throw"Source plugin must be defined";e.deleteFeatures(t.plugin,n)},this.cancelAllFeatures=function(){e.deleteFeatures(t.plugin)},this.postFeatures=function(t){"function"==typeof r&&r(t)},Object.defineProperty(this,"onfeatures",{get:function(){return r},set:function(t){return"function"==typeof t&&(r=t,!0)}})},a=function(t,e){var n=function(e,n,r){var i=[],o=function(e,n){this.extractor=t.plugin.factory.context.createAnalyser(),this.extractor.fftSize=n,e.connect(this.extractor),this.features=[],Object.defineProperty(this,"frameSize",{value:n});var r=this.factory.recursiveProcessing;function i(t){var e={numberOfChannels:1,results:[]};r(t,this.features),e.results[0]={channel:0,results:JSON.parse(t.toJSON())},this.postFeatures(t.length,e)}this.setFeatures=function(t){this.features=t,0===this.features.length?this.extractor.clearCallback():this.extractor.frameCallback(i,this)}},u=function(e,n){var r=new Worker("jsap/feature-worker.js");r.onerror=function(t){console.error(t)},this.setFeatures=function(i){var o=this,u={state:1,sampleRate:t.plugin.factory.context.sampleRate,featureList:i,numChannels:e.numberOfOutputs,frameSize:this.frameSize};this.features=i,i&&i.length>0?(r.onmessage=function(t){1===t.data.state?(r.onmessage=function(t){this.postFeatures(n,t.data.response)}.bind(o),o.extractor.onaudioprocess=function(t){var e,n=[];for(e=0;e<t.inputBuffer.numberOfChannels;e++)n[e]=t.inputBuffer.getChannelData(e);r.postMessage({state:2,frames:n})}.bind(o)):r.postMessage(u)},r.postMessage({state:0})):this.extractor.onaudioprocess=void 0},this.extractor=t.plugin.factory.context.createScriptProcessor(n,e.numberOfOutputs,1),e.connect(this.extractor),this.extractor.connect(t.plugin.factory.context.destination),Object.defineProperty(this,"frameSize",{value:n})};this.addExtractor=function(t){var e;return e=window.Worker?new u(n,t):new o(n,t),i.push(e),Object.defineProperty(e,"postFeatures",{value:function(t,e){var n={outputIndex:r,frameSize:t,results:e};this.postFeatures(n)}.bind(this)}),e},this.findExtractor=function(t){var e=t;return i.find(function(t){return t.frameSize===e})},this.deleteExtractor=function(t){}},r=[];this.updateFeatures=function(e){var i;for(i=0;i<e.length;i++){if(void 0===r[i]){if(i>t.plugin.numOutputs)throw"Requested an output that does not exist";r[i]=new n(t.plugin,t.plugin.outputs[i],i),Object.defineProperty(r[i],"postFeatures",{value:function(t){this.postFeatures(t)}.bind(this)})}var o;for(o=0;o<e[i].length;o++){var u=r[i].findExtractor(e[i][o].frameSize);u||(u=r[i].addExtractor(e[i][o].frameSize)),u.setFeatures(e[i][o].featureList)}}},this.postFeatures=function(e){t.plugin.factory.FeatureMap.postFeatures({plugin:t.plugin.pluginInstance,outputIndex:e.outputIndex,frameSize:e.frameSize,results:e.results})},e.createSourceMap(this,t.plugin.pluginInstance)},s=function(t,e,n){console.log("DEPRECATED!!"),console.log("The class PluginUserInterface has been deprecated"),console.log("Please look at the documents for the new methods for building plugins"),this.processor=t,this.root=document.createElement("div"),e>0&&(this.root.style.width=e+"px"),n>0&&(this.root.style.height=n+"px"),this.dim={width:e,height:n},this.intervalFunction=null,this.updateInterval=null,this.PluginParameterInterfaces=[];var r=function(t,e,n,r){this.input=t,this.processor=n,this.GUI=r,this.AudioParam=e,this.handleEvent=function(t){this.AudioParam.value=this.input.value},this.input.addEventListener("change",this),this.input.addEventListener("mousemove",this),this.input.addEventListener("click",this)};this.createPluginParameterInterfaceNode=function(t,e){var n=new r(t,e,this.processor,this);return this.PluginParameterInterfaces.push(n),n},this.update=function(){}};s.prototype.getRoot=function(){return this.root},s.prototype.getDimensions=function(){return this.dim},s.prototype.getWidth=function(){return this.dim.width},s.prototype.getHeight=function(){return this.dim.height},s.prototype.beginCallbacks=function(t){void 0===t&&(t=250),null===this.intervalFunction&&(this.updateInterval=t,this.intervalFunction=window.setInterval(function(){this.update()}.bind(this),250))},s.prototype.stopCallbacks=function(){null!==this.intervalFunction&&(window.clearInterval(this.intervalFunction),this.updateInterval=null,this.intervalFunction=null)},s.prototype.loadResource=function(t){return new Promise(function(e,n){var r=new XMLHttpRequest;r.open("GET",t),r.onload=function(){200===r.status?e(r.response):n(Error(r.statusText))},r.onerror=function(){n(Error("Network Error"))},r.send()})},s.prototype.clearGUI=function(){this.stopCallbacks(),this.root.innerHTML=""};var c=function(t){function e(e){var n,r,i={message:"updateParameters",parameters:(n=t.parameters.getParameterNames(),r={},n.forEach(function(e){var n=t.parameters.getParameterByName(e);r[e]={value:n.value,maximum:n.maximum,minimum:n.minimum,defaultValue:n.defaultValue,type:n.constructor.name,name:e}}),r)};return e&&(i.sender_id=e),i}function n(t){var n=e(t);r.forEach(function(t){t.postMessage(n)})}var r=[];window.onmessage=function(r){switch(r.data.message){case"setParameterByName":r.data.parameter.name&&r.data.parameter.value&&t.parameters.setParameterByName(r.data.parameter.name,r.data.parameter.value),n(r.data.sender_id);break;case"setParametersByObject":r.data.parameter&&(!function(e){var n=JSON.parse(e.message.parameters);Object.keys(n).forEach(function(e){t.parameters.setParameterByName(e,n[e].value)})}(r),n(r.data.sender_id));break;case"requestParameters":r.source.postMessage(e());break;default:throw'Unknown message type "'+r.data.message+'"'}},Object.defineProperties(this,{updateInterfaces:{value:function(){n()}},closeWindows:{value:function(){for(1;r.length>0;){r.pop().close()}}},registerWindow:{value:function(t){return!r.includes(t)&&(r.push(t),!0)}}})};"undefined"!=typeof window&&(window.BasePlugin=r)},function(t,e,n){"use strict";e.a={LinkedStore:function(t){var e={};function n(t,e,i){var o;for(o in t){var u;t.hasOwnProperty(o)&&("object"==typeof t[o]?(t[o].toXML?u=t[o].toXML(i):(u=i.createElement(o),e.appendChild(u),t[o].length?r(t[o],u,i):n(t[o],u,i)),e.appendChild(u)):e.setAttribute(o,t[o]))}}function r(t,e,r){var i,o;t.length,i=t.every(function(t){return"number"==typeof t}),o=t.every(function(t){return"string"==typeof t}),i||o?t.forEach(function(t,n){e.setAttribute("index-"+n,t)}):t.forEach(function(t,i){var o=document.createElement("value");o.setAttribute("index",i),n(t,o,r),e.appendChild(o)})}Object.defineProperties(this,{name:{get:function(){return t},set:function(e){if(void 0!==t)throw"Name is already set"}},addTerm:{value:function(t,n){if("string"!=typeof t&&0===t.length)throw"term must be a string";e[t]=n}},addTerms:{value:function(t){if("object"!=typeof t)throw"addTerms takes an object of term/value pairs";var e;for(e in t)t.hasOwnProperty(e)&&this.addTerm(e,t[e])}},deleteTerm:{value:function(t){this.addTerm(t,void 0)}},getTerm:{value:function(t){if("string"!=typeof t&&0===t.length)throw"term must be a string";return e[t]}},hasTerm:{value:function(t){if("string"!=typeof t&&0===t.length)throw"term must be a string";return e.hasOwnProperty(t)}},toJSON:{value:function(){return JSON.parse(JSON.stringify(e))}},toXML:{value:function(r){var i;return i=r?r.createElement(t):(r=document.implementation.createDocument(null,t,null)).firstElementChild,n(e,i,r),i}}})}}},function(t,e,n){"use strict";n.d(e,"a",function(){return i});var r=n(0),i=function(t,e){var n=!1,i=!1;r.a.call(this,t,e),Object.defineProperties(this,{addInput:{value:function(){throw'Cannot add input to type "SynthesiserBasePlugin"'}},deleteInput:{value:function(){throw'Cannot delete input to type "SynthesiserBasePlugin"'}},scheduleEvent:{value:function(t,e){n||(console.warning("WARNING - .scheduleEvent is not overridden"),n=!0)},writable:!0},cancelAllEvents:{value:function(){i||(console.warning("WARNING - .cancelAllEvents is not overridden"),i=!0)},writable:!0}})};i.prototype=Object.create(r.a.prototype),i.prototype.constructor=i},function(t,e,n){"use strict";n.r(e),function(t,r){n.d(e,"PluginFactory",function(){return c});var i=n(1),o=n(0);n.d(e,"BasePlugin",function(){return o.a});var u,a,s=n(2);function c(e,n){var r=[],o=[],u=[],a=[],s=0,f=!1;function l(t){return!1===t.url.startsWith("http")&&void 0!==n&&n.startsWith("http")&&(t.url=n+t.url),new Promise(function(e,n){var r=new XMLHttpRequest;r.open("GET",t.url),r.onreadystatechange=function(){if(4==r.readyState){var n=document.createElement("script");n.textContent=r.responseText,document.getElementsByTagName("head")[0].appendChild(n),e(t)}},r.send()})}this.loadPrototypeModule=function(e,n){var r=this;return new Promise(function(n,r){"function"==typeof t.define&&t.define.amd?t.require([e.url],function(t){n(t)}):"object"==typeof t.module&&t.module.exports?n(t.require(e.url)):r("Cannot load using modular systems")}).then(function(t){if("function"==typeof t)return r.addPrototype(t);reject("Is not a module plugin")}).catch(function(){if(!0!==n)return console.warn("Could not load using modular systems"),r.loadPluginScript(e);reject("Cannot load using modular systems")})},this.loadResource=function(t){return new Promise(function(e,n){"object"!=typeof t?n("Error"):"string"!=typeof t.url?n("resourceObject.url must be a string"):"function"!=typeof t.test?n("resourceObject.test must be a function"):e(t)}).then(function(t){var e=t.test();if(!1!==e&&!0!==e)throw"resourceObject.test must return true or false";switch(t.type||(t.type="javascript"),t.type=t.type.toLowerCase(),t.type){case"javascript":return e?new Promise(function(e,n){"string"==typeof t.returnObject?window.hasOwnProperty(t.returnObject)?e(window[t.returnObject]):n(!1):e(!0)}):l(t).then(function(t){return"string"!=typeof t.returnObject||!!window.hasOwnProperty(t.returnObject)&&window[t.returnObject]});default:throw"Invalid type "+String(t.type)}})},this.loadPluginScript=function(t){if(t){if("string"!=typeof t.returnObject)throw"resourceObject.returnObject must be the name of the prototype function";return this.loadResource(t).then(function(t){return this.addPrototype(t)}.bind(this))}};var d=function(t,n){this.next_node=void 0;var r=!1,i=e.createGain(),o=e.createGain();i.connect(n.getInputs()[0]),n.getOutputs()[0].connect(o),this.bypass=function(t){return(t=!0===t)===r?r:(t?(i.disconnect(),i.connect(o),r=!0):(i.disconnect(),i.connect(n.getInputs()[0]),r=!1),r)},this.isBypassed=function(){return r},this.reconnect=function(t){this.connect(t)},this.connect=function(t){return void 0!==this.next_node&&this.disconnect(),void 0!==t&&void 0!==t.input&&(this.next_node=t,o.connect(this.next_node.input),!0)},this.disconnect=function(){void 0!==this.next_node&&(o.disconnect(this.next_node.input),this.next_node=void 0)},this.destroy=function(){n.destroy()},Object.defineProperties(this,{id:{value:t},node:{value:n},input:{get:function(){return i}},output:{get:function(){return o}},bypassed:{get:function(){return r}}})};d.prototype.factory=this;var h=function(t,n){var r=e.createGain();n.getOutputs()[0].connect(r),this.destroy=function(){n.destroy()},Object.defineProperties(this,{id:{value:t},node:{value:n},output:{get:function(){return r}}})},p=function(t,e){var n=this;function r(t,e){if(e)return e.then(l(t));var n=l(t);return n.then(function(t){if(void 0!==t.resources&&t.resources.length>0)for(var e=0;e<t.resources.length;e++)n=r(t.resources[e],n)}),n}function i(t){return t.hasOwnProperty("length")&&t.length>0?i(t[t.length-1]):t.hasOwnProperty("resources")?i(t.resources):t.test}Object.defineProperties(this,{name:{value:t.prototype.name},proto:{value:t},version:{value:t.prototype.version},uniqueID:{value:t.prototype.uniqueID},hasMidiInput:{value:t.prototype.hasMidiInput||!1},hasMidiOutput:{value:t.prototype.hasMidiOutput||!1}}),this.createPluginInstance=async function(r,i){var o=function(r){return Promise.all(a).then(function(){return new Promise(function(n,i){!function(){for(var t=!0,e=0;e<a.length;e++)if(1!==a[e].state||!a[e].test()){t=!1;break}return t}()?i(new Error("Plugin not ready")):n(new t(e,r))})}).then(function(t){return new Promise(function(e,n){if(t.initialise)return t.initialise().then(function(){e(t)});e(t)})}).then(function(r){var i;if(!0!==r.hasMidiInput&&!0!==r.hasMidiOutput)i=new d(s++,r);else{if(!0!==r.hasMidiInput||!0===r.hasMidiOutput)throw"No Instance Holder Available!";i=new h(s++,r)}return Object.defineProperties(r,{pluginInstance:{value:i},prototypeObject:{value:n},name:{value:t.prototype.name},version:{value:t.prototype.version},uniqueID:{value:t.prototype.uniqueID},SesionData:{value:e.SessionData},UserData:{value:e.UserData}}),Object.defineProperties(i,{prototypeObject:{value:n},externalInterface:{value:r.externalInterface}}),e.registerPluginInstance(i),i})}(r);return!0===i?o:(await o,o)};var o,u,a=[];if(t.prototype.resources)for(var c=0;c<t.prototype.resources.length;c++){var f=t.prototype.resources[c];switch(f.type=f.type.toLowerCase(),f.type){case"css":o=f.url,u=void 0,(u=document.createElement("link")).setAttribute("rel","stylesheet"),u.setAttribute("type","text/css"),u.setAttribute("href",o),document.getElementsByTagName("head")[0].appendChild(u);break;case"javascript":var p={promise:r(f),state:0,complete:function(){this.state=1},test:i(f)};p.promise.then(p.complete.bind(p)),a.push(p);break;default:throw"Could not load "+f.url+", invalid resource.type"}}this.getResourcePromises=function(){return a}};this.addPrototype=function(t){var e=this;return new Promise(function(e,n){"function"!=typeof t?n("The Prototype must be a function!"):"string"!=typeof t.prototype.name||0===t.prototype.name.length?n("Malformed plugin. Name not defined"):"string"!=typeof t.prototype.version||0===t.prototype.version.length?n("Malformed plugin. Version not defined"):"string"!=typeof t.prototype.uniqueID||0===t.prototype.uniqueID.length?n("Malformed plugin. uniqueID not defined"):e(t)}).then(function(t){var n={proto:t,name:t.prototype.name,version:t.prototype.version,uniqueID:t.prototype.uniqueID},r=u.find(function(t){var e,n=0;for(e in this)t[e]===this[e]&&n++;return 4===n},n);if(r)throw"The plugin must be unique!";return r=new p(t,e),u.push(r),Object.defineProperties(r,{factory:{value:e}}),r})},this.getPrototypes=function(){return u},this.getAudioPluginPrototypes=function(){return u.filter(function(t){return 0==t.hasMidiInput&&0==t.hasMidiOutput})},this.getMidiSynthPrototypes=function(){return u.filter(function(t){return 1==t.hasMidiInput&&0==t.hasMidiOutput})},this.getMidiPluginPrototypes=function(){return u.filter(function(t){return 1==t.hasMidiInput&&1==t.hasMidiOutput})},this.getAllPlugins=function(){return a},this.getAllPluginsObject=function(){var t,e={factory:this,subFactories:[]};for(t=0;t<r.length;t++)e.subFactories.push({subFactory:r[t],plugins:r[t].getPlugins()});return e},this.createSubFactory=function(t,e){return console.warn('DEPRECATED - This function will be deprecated in favour of "createAudioPluginChainManager"'),this.createAudioPluginChainManager(t,e)},this.destroySubFactory=function(t,e){return console.warn('DEPRECATED - This function will be deprecated in favour of "destroyAudioPluginChainManager"'),this.destroyAudioPluginChainManager(t,e)},this.createAudioPluginChainManager=function(t,e){var n=new g(this,t,e);return Object.defineProperties(n,{SessionData:{value:this.SessionData},UserData:{value:this.UserData}}),r.push(n),n},this.destroyAudioPluginChainManager=function(t){var e=r.findIndex(function(t){return t===this},t);e>=0&&(r.splice(e,1),t.destroy())},this.createMidiSynthesiserHost=function(t){var e=new y(t);return Object.defineProperties(e,{SessionData:{value:this.SessionData},UserData:{value:this.UserData}}),o.push(e),e},this.destroyMidiSynthesiserHost=function(t){var e=o.findIndex(function(t){return t===this},t);e>=0&&(o.splice(e,1),t.destroy())},this.registerPluginInstance=function(t){if(a.find(function(t){return t===this},t))throw"Plugin Instance not unique";return a.push(t),f&&t.node.start.call(t.node),!0},this.deletePlugin=function(t){var e=a.findIndex(function(e){return e.id===t});e>=0&&a.splice(e,1)[0].node.externalInterface.closeWindows()},this.audioStart=function(t){f||(!function(t){a.forEach(function(e){e.node.start.call(e.node,t)})}(t),f=!0)},this.audioStop=function(){f&&(a.forEach(function(t){t.node.stop.call(t.node)}),f=!1)};this.FeatureMap=new function(){var t=[],e=function(t){this.name=t.name,this.parameters=this.parameters,this.features=[]};function n(t,e){return t.find(function(t){return t.name===this.name},e)}function r(t,n){var r=new e(t);return n.push(r),r}var i=function(t,e){var i=[];function u(t){return i.find(function(t){return t.outputIndex===this.outputIndex&&t.frameSize===this.frameSize},t)}function a(){function e(t){var i,o=[];for(i=0;i<t.length;i++){var u=n(o,t[i]);(!u||t.parameters&&0!==t[i].parameters.length)&&(u=r(t[i],o)),t[i].features&&t[i].features.length>0&&(u.features=e(t[i].features))}return o}var o,u=[];for(o=0;o<i.length;o++){void 0===u[i[o].outputIndex]&&(u[i[o].outputIndex]=[]);var a=u[i[o].outputIndex].find(function(t){return t.frameSize===this.frameSize},i[o]);a||(a={frameSize:i[o].frameSize,featureList:void 0},u[i[o].outputIndex].push(a)),a.featureList=e(i[o].getFeatureList())}t.updateFeatures(u)}this.getSourceInstance=function(){return e},this.getSender=function(){return t},this.requestFeatures=function(t,e){var n=u(e);n||(n={outputIndex:e.outputIndex,frameSize:e.frameSize,requestors:[],getFeatureList:function(){var t,e=[];for(t=0;t<this.requestors.length;t++)e=e.concat(this.requestors[t].getFeatureList());return e}},i.push(n));var r=n.requestors.find(function(t){return t.getRequestorInstance()===this},t);r||(r=new o(t),n.requestors.push(r)),r.addFeatures(e),a()},this.findFrameMap=function(t,e){return i.find(function(n){return n.outputIndex===t&&n.frameSize===e})},this.cancelFeatures=function(t,e){if(void 0===e)i.forEach(function(e){var n=e.requestors.findIndex(function(e){return e.getRequestorInstance()===t});n>=0&&e.requestors.splice(n,1)});else{var n=u(e);if(!n)return;var r=n.requestors.find(function(t){return t.getRequestorInstance()===this},t);if(!r)return;r.deleteFeatures(e)}a()}},o=function(t){var e=[];t.node.featureMap.Receiver,this.getRequestorInstance=function(){return t},this.addFeatures=function(t){!function t(e,i){var o;for(o=0;o<i.length;o++){var u=n(e,i[o]);(!u||i[o].parameters&&0!==i[o].parameters.length)&&(u=r(i[o],e)),void 0!==i[o].features&&i[o].features.length>0&&t(u.features,i[o].features)}}(e,t.features)},this.deleteFeatures=function(t){!function t(r,i){var o,u=i.length;for(o=0;o<u;o++){var a=n(r,i[o]);a>=0&&(i[a].features&&i[a].features.length>0?t(r[a].features,i[a].features):e.splice(a,0))}}(e,t.features)},this.getFeatureList=function(){return e},this.postFeatures=function(n){var r,i={plugin:n.plugin,outputIndex:n.outputIndex,frameSize:n.frameSize,features:{numberOfChannels:n.results.numberOfChannels,results:[]}};function o(t,e,n){var r;function i(t){return t.name===r}for(r in e)if(e.hasOwnProperty(r)){var u=n.find(i);u&&(e[r].constructor===Object&&u.results?(t[r]={},o(t[r],e[r],u.results)):t[r]=e[r])}}for(r=0;r<n.results.numberOfChannels;r++)i.features.results[r]={},o(i.features.results[r],n.results.results[r].results,e);t.node.featureMap.Receiver.postFeatures(i)}};function u(e){return t.findIndex(function(t){return t.getSender()===this},e)}function a(t,e,n){var r=t[u(e)];if(!r&&!(r=t[u(n)]))throw"Could not locate source map";return r}this.createSourceMap=function(e,n){var r=new i(e,n);return t.push(r),r},this.deleteSourceMap=function(e){var n=u(e);if(-1===n)throw"Could not find the source map for the plugin";t.splice(n,1)},this.getPluginSender=function(t){return t.constructor===d&&(t=t.node),t.featureMap.Sender},this.requestFeatures=function(e,n,r){e.constructor!==d&&(e=e.pluginInstance);var i=this.getPluginSender(n);a(t,n,i).requestFeatures(e,r)},this.deleteFeatures=function(e,n,r){if(e.constructor!==d&&(e=e.pluginInstance),void 0===n)t.forEach(function(t){t.cancelFeatures(e)});else{var i=this.getPluginSender(n);a(t,n,i).cancelFeatures(e,r)}},this.getFeatureList=function(t,e){},this.postFeatures=function(e){var n=t[u(e.plugin)];if(!n&&!(n=t[u(this.getPluginSender(e.plugin))]))throw"Plugin Instance not loaded!";n.findFrameMap(e.outputIndex,e.frameSize).requestors.forEach(function(t){t.postFeatures(this)},e)}},Object.defineProperty(this.FeatureMap,"factory",{value:this});var v=[];this.createStore=function(t){var e=new i.a.LinkedStore(t);return v.push(e),e},this.getStores=function(){return v},this.findStore=function(t){return v.find(function(e){return e.name===t})},this.SessionData=new i.a.LinkedStore("Session"),this.UserData=new i.a.LinkedStore("User");var m=function(t,e){var n,r=function(e,n){var r=[],i=function(e,n){this.extractor=e.context.createAnalyser(),this.extractor.fftSize=n,e.connect(this.extractor),this.features=[],Object.defineProperty(this,"frameSize",{value:n});var r=t.recursiveProcessing;function i(t){var e={numberOfChannels:1,results:[]};r(t,this.features),e.results[0]={channel:0,results:JSON.parse(t.toJSON())},this.postFeatures(t.length,e)}this.setFeatures=function(t){this.features=t,0===this.features.length?this.extractor.clearCallback():this.extractor.frameCallback(i,this)},this.rejoinExtractor=function(){e.connect(this.extractor)}},o=function(t,e){var n=new Worker("jsap/feature-worker.js");n.onerror=function(t){console.error(t)},this.setFeatures=function(r){var i=this,o={state:1,sampleRate:t.context.sampleRate,featureList:r,numChannels:t.numberOfOutputs,frameSize:this.frameSize};this.features=r,r&&r.length>0?(n.onmessage=function(t){1===t.data.state?(n.onmessage=function(t){this.postFeatures(e,t.data.response)}.bind(i),i.extractor.onaudioprocess=function(t){var e,r=[];for(e=0;e<t.inputBuffer.numberOfChannels;e++)r[e]=t.inputBuffer.getChannelData(e);n.postMessage({state:2,frames:r})}.bind(i)):n.postMessage(o)},n.postMessage({state:0})):this.extractor.onaudioprocess=void 0},this.rejoinExtractor=function(){t.connect(this.extractor)},this.extractor=t.context.createScriptProcessor(e,t.numberOfOutputs,1),t.connect(this.extractor),this.extractor.connect(t.context.destination),Object.defineProperty(this,"frameSize",{value:e})};this.addExtractor=function(t){var e;return e=window.Worker?new o(n,t):new i(n,t),r.push(e),Object.defineProperty(e,"postFeatures",{value:function(t,e){var n={outputIndex:0,frameSize:t,results:e};this.postFeatures(n)}.bind(this)}),e},this.findExtractor=function(t){var e=t;return r.find(function(t){return Number(t.frameSize)===Number(e)})},this.rejoinExtractors=function(){r.forEach(function(t){t.rejoinExtractor()})},this.deleteExtractor=function(t){}};this.updateFeatures=function(e){var i;for(i=0;i<e.length;i++){if(void 0===n){if(i>1)throw"Requested an output that does not exist";n=new r(t,t.chainStart),Object.defineProperty(n,"postFeatures",{value:function(t){this.postFeatures(t)}.bind(this)})}var o;for(o=0;o<e[i].length;o++){var u=n.findExtractor(e[i][o].frameSize);u||(u=n.addExtractor(e[i][o].frameSize)),u.setFeatures(e[i][o].featureList)}}},this.rejoinExtractors=function(){n&&n.rejoinExtractors()},this.postFeatures=function(t){e.postFeatures({plugin:this,outputIndex:t.outputIndex,frameSize:t.frameSize,results:t.results})},e.createSourceMap(this,void 0)},g=function(t,e,n){var r=[],o=e,u=n,a="",s=1,c=new m(this,t.FeatureMap);function f(){for(var t=0,e=r.length-1;t<e;){var n=r[t++],i=r[t];n.reconnect(i)}}function l(){r.forEach(function(t){t.disconnect()})}function d(){return r.length>0?(o.disconnect(r[0].input),r[r.length-1].output.disconnect(u)):o.disconnect(u),!0}function h(){r.length>0?(o.connect(r[0].input),r[r.length-1].output.connect(u)):o.connect(u),c.rejoinExtractors()}function p(t){return new Promise(function(e,n){0===s?n("SubFactory has been destroyed! Cannot add new plugins"):e(t)}).then(function(){return t.createPluginInstance(self,!1).then(function(t){return Object.defineProperties(t,{TrackData:{value:self.TrackData}}),t})})}function v(t,e){var n,r,i=e.length;for(n=0;n<i;n++)t[(r=e[n]).name].apply(t,r.parameters),r.features&&r.features.length>0&&v(t.result[r.name],r.features)}this.parent=t,o.disconnect(),o.connect(n),this.TrackData=new i.a.LinkedStore("Track"),this.PluginData=new i.a.LinkedStore("Plugin"),this.featureSender=c,this.getFeatureChain=function(){},this.bypassPlugin=function(t,e){!1!==r.includes(t)&&t.bypass(e)},this.getPrototypes=function(){return this.parent.getPrototypes()},this.getFactory=function(){return this.parent},this.destroy=function(t){var e;for(e=0;e<r.length;e++)this.destroyPlugin(r[e]);o.disconnect(),!0===t&&o.connect(u)},this.createPlugin=function(t){return p(t).catch(function(t){throw"Plugin did not get created! Aborting"}).then(function(t){return d(),r.push(t),l(),f(),h(),t.node.onloaded.call(t.node),t})},this.destroyPlugin=function(t){if(0!==s){var e=this.getPluginIndex(t);e>=0&&(d(),t.node.stop.call(t.node),t.node.onunloaded.call(t.node),t.node.deconstruct.call(t.node),r.splice(e,1),this.parent.deletePlugin(t.id),l(),f(),h())}},this.getPlugins=function(){return r},this.getAllPlugins=function(){return this.parent.getAllPluginsObject()},this.getPluginIndex=function(t){if(0!==s)return r.findIndex(function(t,e,n){return t===this},t)},this.movePlugin=function(t,e){if(0!==s){var n,i,o,u=this.getPluginIndex(t);u>=0&&(d(),l(),n=r.splice(u,1),t.node.onunloaded.call(t.node),0===e?r=n.concat(r):e>=r.length?r=r.concat(n):(i=r.slice(0,e),o=r.slice(e),r=i.concat(n.concat(o))),f(),h(),t.node.onloaded.call(t.node))}},this.copyPlugin=function(t,e){if(void 0===e&&(e=r.length),"number"!=typeof e||e<0||e>r.length)throw"Plugin copy index outside of the chain scope.";return p(t.prototypeObject).catch(function(t){throw"Plugin did not get created! Aborting"}).then(function(n){return n.node.parameters.setParametersByObject(t.node.parameters.getParameterObject()),d(),l(),r.splice(e,0,n),f(),h(),n.node.onloaded.call(n.node),n})},Object.defineProperties(this,{chainStart:{value:e},chainStop:{value:n},name:{get:function(){return a},set:function(t){return"string"==typeof t&&(a=t),a}},recursiveProcessing:{get:function(){return v}}})},y=function(t){var e,n=[];Object.defineProperties(this,{connect:{value:function(t,r,i){if(void 0===t)throw"Must define an AudioNode object";n.find(function(e){return e.destinationNode==t&&e.output==r&&e.input==i})||(n.push({destinationNode:t,output:r,input:i}),void 0===e?console.warn("MIDI Synthesiser is not loaded, connections will be validated on load"):e.node.connect(t,r,i))}},disconnect:{value:function(t,r,i){void 0===t?(e&&e.disconnect(),n=[]):"number"==typeof t&&void 0===r?(r=t,t=void 0,n=n.filter(function(t){return t.output!=r||(e&&e.node.disconnect(t.destinationNode,t.output),!1)})):"object"==typeof t&&void 0===r?n=n.filter(function(n){return n.destinationNode!=t||(e&&e.node.disconnect(n.destinationNode),!1)}):"object"==typeof t&&"number"==typeof r?n=n.filter(function(n){return n.destinationNode!=t||n.output!=r||(e&&e.node.disconnect(n.destinationNode,n.output),!1)}):"object"==typeof t&&"number"==typeof r&&"number"==typeof i&&(n=n.filter(function(n){return n.destinationNode!=t||n.output!=r||n.input!=i||(e&&e.node.disconnect(n.destinationNode,n.output,n.input),!1)}))}},scheduleEvent:{value:function(t,n){if(!e)throw"MIDI Synthesiser not loaded";e.node.scheduleEvent(t,n)}},cancelAllEvents:{value:function(t,n){if(!e)throw"MIDI Synthesiser not loaded";e.node.cancelAllEvents()}},midiSynthesiser:{get:function(){return e},set:function(){throw"Cannot set read-only attribute."}},loadMidiSynthesiserModule:{value:function(t){var r=this;return new Promise(function(e,n){0==t.hasMidiInput||1==t.hasMidiOutput?n("Prototype is not a MidiSynthesis type. hasMidiInput must be true and hasMidiOutput must be false"):e(t)}).then(function(t){return function(t){var e=this;return new Promise(function(e,n){0==t.hasMidiInput||1==t.hasMidiOutput?n("Prototype is not a MidiSynthesis type. hasMidiInput must be true and hasMidiOutput must be false"):e(t)}).then(function(){return t.createPluginInstance(e,!1).then(function(t){return Object.defineProperties(t,{TrackData:{value:e.TrackData}}),t})})}.call(r,t).catch(function(t){throw"Plugin did not get created! Aborting"})}).then(function(t){return e=t,n.forEach(function(t){e.node.connect(t.destinationNode,t.output,t.input)}),e})}}})},b=function(t){return Object.create({setDefaultInterface:function(t,e,n){return{url:t,width:e,height:n}},buildPluginInterface:function(t,e){var n=document.createElement("iframe");return n.src=e.src,e.width&&(n.width=e.width),e.height&&(n.height=e.height),n.style.border="0",n},pollAllPlugins:function(){t.getAllPlugins().forEach(function(t){t.node.externalInterface.updateInterfaces()})}})}(this);Object.defineProperties(this,{context:{value:e},hasAudioStarted:{get:function(){return f}},pluginRootURL:{get:function(){return n},set:function(t){if("string"==typeof t)return n=t;throw"Cannot set root URL without a string"}},createFactoryCopy:{value:function(t){return e=t,new Promise(function(t,n){void 0===e.sampleRate?n(new Error("Invalid audio context provided")):t(e)}).then(function(t){var e=new c(t),n=[];return u.forEach(function(t){n.push(e.addPrototype(t.proto))}),Promise.all(n).then(function(){return e})}).then(function(t){return t});var e}},PluginGUI:{value:b}})}n.d(e,"SynthesiserBasePlugin",function(){return s.a}),function(){if(void 0===window.jsXtract){var t=document.createElement("script");t.src="https://gitcdn.xyz/repo/nickjillings/js-xtract/master/jsXtract.js",document.getElementsByTagName("head")[0].appendChild(t)}}(),u=void 0,a=function(){return{PluginFactory:c,BasePlugin:o.a,SynthesiserBasePlugin:s.a}},"function"==typeof define&&n(6)?define("JSAP",[],a):r.exports?r.exports=a():u.JSAP=a()}.call(this,n(4),n(5)(t))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e){(function(e){t.exports=e}).call(this,{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,